;;; Python tests
(defun py-tests ()
  (interactive)
  (setq path (projectile-parent (file-name-directory buffer-file-name)))
  (let ((process-environment (cons (concat "PYTHONPATH=" path) process-environment))
        (buffer (get-buffer-create "*Test Results*")))
    (set-buffer buffer)
    (erase-buffer)
    (call-process "python" nil t nil "-m" "unittest" "discover" "-s" (concat path "/tests"))
    (display-buffer buffer))
  (py-test-parse-buffer)
  )

(defun py-test-parse-buffer ()
  (goto-char (point-min)) 
  (setq link-begin (search-forward "\"" nil t))
  (while link-begin
    (setq link-end (search-forward "\""))
    (let ((map (make-sparse-keymap)))
      (define-key map (kbd "RET") 'py-test-open-source)
      (add-text-properties link-begin link-end '(mouse-face highlight face bold))
      (put-text-property link-begin link-end 'keymap map))
    (setq link-begin (search-forward "\"" nil t)))
  )

(defun py-test-open-source ()
  (interactive)
  (setq link-start (search-backward "\""))
  (forward-char)
  (setq link-end (search-forward "\""))
  (setq line-nr-pos (search-forward-regexp "Line [0-9]*"))
  (setq line-nr (string-to-number (thing-at-point 'word)))
  (switch-to-buffer (find-file-noselect (buffer-substring (+ link-start 1) (- link-end 1))))
  (let ((current-prefix-arg line-nr))
    (call-interactively 'goto-line)))
