#+TITLE: Emacs Configuration

* Packages setup
  
  Loading all the resources so the rest of the config has access to all these resoruces.

** Packages sources

   Configure all sources for packages to be used throughtout this config file.
   #+BEGIN_SRC emacs-lisp
    (setq package-archives '(("melpa" . "http://melpa.milkbox.net/packages/")
                             ("marmalade" . "http://marmalade-repo.org/packages/")
                             ("SC" . "http://joseito.republika.pl/sunrise-commander/")
                             ("gnu" . "http://elpa.gnu.org/packages/")))
   #+END_SRC


** use-package bootstrap

   Ensure that 'use-package' is installed.
   #+BEGIN_SRC emacs-lisp
   (if (not (package-installed-p 'use-package))
   (progn
       (package-refresh-contents)
       (package-install 'use-package)))
 
    (require 'use-package)
   #+END_SRC
   

** Iinitialize packages
  
   load all packages that are installed. 
   #+BEGIN_SRC emacs-lisp
   ;; activate all the packages (in particular autoloads)
   (package-initialize)
   #+END_SRC
   

** Load custom local code

   All custom tooling that is available within this repository.
   #+BEGIN_SRC emacs-lisp
   (add-to-list 'load-path "~/.emacs.d/custom/")
   #+END_SRC

   #+RESULTS:
   | ~/.emacs.d/custom/ | /home/vercapi/.emacs.d/elpa/powerline-20180321.1948 | /home/vercapi/.emacs.d/elpa/use-package-20180613.2219 | /home/vercapi/.emacs.d/elpa/bind-key-20180512.2130 | /usr/share/emacs/26.1/site-lisp | /usr/share/emacs/site-lisp | /usr/share/emacs/26.1/lisp | /usr/share/emacs/26.1/lisp/vc | /usr/share/emacs/26.1/lisp/url | /usr/share/emacs/26.1/lisp/textmodes | /usr/share/emacs/26.1/lisp/progmodes | /usr/share/emacs/26.1/lisp/play | /usr/share/emacs/26.1/lisp/org | /usr/share/emacs/26.1/lisp/nxml | /usr/share/emacs/26.1/lisp/net | /usr/share/emacs/26.1/lisp/mh-e | /usr/share/emacs/26.1/lisp/mail | /usr/share/emacs/26.1/lisp/leim | /usr/share/emacs/26.1/lisp/language | /usr/share/emacs/26.1/lisp/international | /usr/share/emacs/26.1/lisp/image | /usr/share/emacs/26.1/lisp/gnus | /usr/share/emacs/26.1/lisp/eshell | /usr/share/emacs/26.1/lisp/erc | /usr/share/emacs/26.1/lisp/emulation | /usr/share/emacs/26.1/lisp/emacs-lisp | /usr/share/emacs/26.1/lisp/cedet | /usr/share/emacs/26.1/lisp/calendar | /usr/share/emacs/26.1/lisp/calc | /usr/share/emacs/26.1/lisp/obsolete |

* UI Configuration

** Emacs frame appearance

   #+BEGIN_SRC emacs-lisp
     (tool-bar-mode -1) ;; no toolbar
     (menu-bar-mode -1) ;; no menubar
     (toggle-scroll-bar -1) ;; no scrollbar
     (fset 'yes-or-no-p 'y-or-n-p) ;; type y/n not yes/no
   #+END_SRC

   #+RESULTS:
   : y-or-n-p

** mode line

*** Standard configuration of the mode line
    
    Set the file size on the mode line  
    #+BEGIN_SRC emacs-lisp
    (setq size-indication-mode t)
    #+END_SRC

    #+RESULTS:
    : t

    #+BEGIN_SRC emacs-lisp
    (setq column-number-mode t)
    (size-indication-mode) ;; show filesize
    #+END_SRC

    #+RESULTS:
    : t

*** Powerline

    Activate powerline with the default theme

     You need to use patched fonts -> 
     git clone https://github.com/powerline/fonts

     #+BEGIN_SRC emacs-lisp
       (use-package powerline
	   :ensure t
	   :config
	   (powerline-default-theme)
	   (setq powerline-default-separator 'slant))
     #+END_SRC

     #+RESULTS:
     : t


** Fonts

   Set the standard fonts for emacs and other componets
   This is based on std configuration. So if emacs adds this again in init.el or .emacs things might break and this needs to be update manually

   #+BEGIN_SRC emacs-lisp
     (custom-set-faces
      '(default ((t (:family "DejaVu Sans Mono for Powerline" :foundry "unknown" :slant normal :weight normal :height 140 :width normal))))
      '(minimap-font-face ((t (:height 40 :family "DejaVu Sans Mono"))))
      '(mode-line ((t (:family "DejaVu Sans Mono for Powerline" :foundry "unknown" :slant normal :weight normal :height 140 :width normal)))))
    #+END_SRC

    #+RESULTS:

* Emacs Behavior
** General behavior 

    Turn of the bell alarm
    #+BEGIN_SRC emacs-lisp
    (setq ring-bell-function 'ignore)
    #+END_SRC

    #+RESULTS:
    : ignore

    
** Window behavior

   Winner mode to undo and redo window configuration
   #+BEGIN_SRC emacs-lisp
     (winner-mode 1)
   #+END_SRC

   #+RESULTS:
   : t

   Set S-<arrows> to move around the windows (S- <arrow> to move along windows)
   And also ensure this works in org mode. See org-mode [[https://orgmode.org/manual/Conflicts.html][manual]] on 'Conflicts'
   #+BEGIN_SRC emacs-lisp
     (windmove-default-keybindings)

     (setq org-replace-disputed-keys t)
     (add-hook 'org-shiftup-final-hook 'windmove-up)
     (add-hook 'org-shiftleft-final-hook 'windmove-left)
     (add-hook 'org-shiftdown-final-hook 'windmove-down)
     (add-hook 'org-shiftright-final-hook 'windmove-right)
   #+END_SRC

   #+RESULTS:
   | windmove-right |
* Source control
  
  #+BEGIN_SRC emacs-lisp
    (use-package magit
      :ensure t
      :bind ("C-x t" . magit-status))
  #+END_SRC

  #+RESULTS:
  : magit-status

* Helm

  #+BEGIN_SRC emacs-lisp
    (use-package helm
      :ensure t
      :config
      (setq helm-split-window-in-side-p               t ; open helm buffer inside current window, not occupy whole other window
		helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
		helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
		helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
		helm-ff-file-name-history-use-recentf t)
      :bind (("M-x" . helm-M-x)
	     ("C-x b" . helm-mini)
	     ("C-x C-f" . helm-find-files)
	     ("C-c h o" . helm-occur)
	     ("M-y" . helm-show-kill-ring)
	     :map helm-map
	     ("<tab>" . helm-execute-persistent-action)
	     ("C-z" . helm-select-action)))
  #+END_SRC

  #+RESULTS:
  : helm-select-action
