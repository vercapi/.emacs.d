#+TITLE: Emacs Configuration
#+OPTIONS: toc:4 h:4m 

* Packages setup
  
Initialize
#+BEGIN_SRC emacs-lisp
;; activate all the packages (in particular autoloads)
(package-initialize)
#+END_SRC
  
** Packages sources

#+BEGIN_SRC emacs-lisp
 (setq package-archives '(("melpa" . "http://melpa.milkbox.net/packages/")
                          ("marmalade" . "http://marmalade-repo.org/packages/")
                          ("SC" . "http://joseito.republika.pl/sunrise-commander/")
                          ("gnu" . "http://elpa.gnu.org/packages/")))
#+END_SRC

   
** Cask buid tool setup
   
   #+BEGIN_SRC shell
   curl -fsSL https://raw.githubusercontent.com/cask/cask/master/go | python
   #+END_SRC

   This needs to be included in ~/.bash_profile
   export PATH="/home/vercapi/.cask/bin:$PATH"

   Init cask
   #+BEGIN_SRC emacs-lisp
   (require 'cask "~/.cask/cask.el")
   (cask-initialize)
   #+END_SRC

   #+RESULTS:
   : [cl-struct-cask-bundle nil nil nil ([cl-struct-cask-dependency yasnippet nil nil nil nil nil nil] [cl-struct-cask-dependency yaml-mode nil nil nil nil nil nil] [cl-struct-cask-dependency xah-math-input nil nil nil nil nil nil] [cl-struct-cask-dependency with-editor nil nil nil nil nil nil] [cl-struct-cask-dependency which-key nil nil nil nil nil nil] [cl-struct-cask-dependency web-mode nil nil nil nil nil nil] [cl-struct-cask-dependency use-package nil nil nil nil nil nil] [cl-struct-cask-dependency undo-tree nil nil nil nil nil nil] [cl-struct-cask-dependency twittering-mode nil nil nil nil nil nil] [cl-struct-cask-dependency tablist nil nil nil nil nil nil] [cl-struct-cask-dependency systemd nil nil nil nil nil nil] [cl-struct-cask-dependency syntax-subword nil nil nil nil nil nil] [cl-struct-cask-dependency sunrise-x-modeline nil nil nil nil nil nil] [cl-struct-cask-dependency sunrise-x-buttons nil nil nil nil nil nil] [cl-struct-cask-dependency sunrise-commander nil nil nil nil nil nil] [cl-struct-cask-dependency sr-speedbar nil nil nil nil nil nil] [cl-struct-cask-dependency smex nil nil nil nil nil nil] [cl-struct-cask-dependency smartparens nil nil nil nil nil nil] [cl-struct-cask-dependency seq nil nil nil nil nil nil] [cl-struct-cask-dependency salt-mode nil nil nil nil nil nil] [cl-struct-cask-dependency s nil nil nil nil nil nil] [cl-struct-cask-dependency rainbow-delimiters nil nil nil nil nil nil] [cl-struct-cask-dependency pymacs nil nil nil nil nil nil] [cl-struct-cask-dependency projectile nil nil nil nil nil nil] [cl-struct-cask-dependency prodigy nil nil nil nil nil nil] [cl-struct-cask-dependency powerline nil nil nil nil nil nil] [cl-struct-cask-dependency popwin nil nil nil nil nil nil] [cl-struct-cask-dependency popup nil nil nil nil nil nil] [cl-struct-cask-dependency peep-dired nil nil nil nil nil nil] [cl-struct-cask-dependency pdf-tools nil nil nil nil nil nil] [cl-struct-cask-dependency pallet nil nil nil nil nil nil] [cl-struct-cask-dependency package-build nil nil nil nil nil nil] [cl-struct-cask-dependency org-bullets nil nil nil nil nil nil] [cl-struct-cask-dependency nyan-mode nil nil nil nil nil nil] [cl-struct-cask-dependency multiple-cursors nil nil nil nil nil nil] [cl-struct-cask-dependency magit-popup nil nil nil nil nil nil] [cl-struct-cask-dependency magit nil nil nil nil nil nil] [cl-struct-cask-dependency lua-mode nil nil nil nil nil nil] [cl-struct-cask-dependency jedi-core nil nil nil nil nil nil] [cl-struct-cask-dependency jedi nil nil nil nil nil nil] [cl-struct-cask-dependency idle-highlight-mode nil nil nil nil nil nil] [cl-struct-cask-dependency hydra nil nil nil nil nil nil] [cl-struct-cask-dependency htmlize nil nil nil nil nil nil] [cl-struct-cask-dependency helm-swoop nil nil nil nil nil nil] [cl-struct-cask-dependency helm-spotify nil nil nil nil nil nil] [cl-struct-cask-dependency helm-projectile nil nil nil nil nil nil] [cl-struct-cask-dependency helm-core nil nil nil nil nil nil] [cl-struct-cask-dependency helm nil nil nil nil nil nil] [cl-struct-cask-dependency goto-chg nil nil nil nil nil nil] [cl-struct-cask-dependency git-gutter nil nil nil nil nil nil] [cl-struct-cask-dependency git-commit nil nil nil nil nil nil] [cl-struct-cask-dependency flycheck-pyflakes nil nil nil nil nil nil] [cl-struct-cask-dependency flycheck-cask nil nil nil nil nil nil] [cl-struct-cask-dependency flycheck nil nil nil nil nil nil] [cl-struct-cask-dependency f nil nil nil nil nil nil] [cl-struct-cask-dependency expand-region nil nil nil nil nil nil] [cl-struct-cask-dependency exec-path-from-shell nil nil nil nil nil nil] [cl-struct-cask-dependency dsvn nil nil nil nil nil nil] [cl-struct-cask-dependency drag-stuff nil nil nil nil nil nil] [cl-struct-cask-dependency dockerfile-mode nil nil nil nil nil nil] [cl-struct-cask-dependency docker-tramp nil nil nil nil nil nil] [cl-struct-cask-dependency docker nil nil nil nil nil nil] [cl-struct-cask-dependency diminish nil nil nil nil nil nil] [cl-struct-cask-dependency deferred nil nil nil nil nil nil] [cl-struct-cask-dependency dash nil nil nil nil nil nil] [cl-struct-cask-dependency concurrent nil nil nil nil nil nil] [cl-struct-cask-dependency company-shell nil nil nil nil nil nil] [cl-struct-cask-dependency company nil nil nil nil nil nil] [cl-struct-cask-dependency cask nil nil nil nil nil nil] [cl-struct-cask-dependency bind-key nil nil nil nil nil nil] [cl-struct-cask-dependency beacon nil nil nil nil nil nil] [cl-struct-cask-dependency avy nil nil nil nil nil nil] [cl-struct-cask-dependency auto-complete nil nil nil nil nil nil] [cl-struct-cask-dependency async nil nil nil nil nil nil] [cl-struct-cask-dependency anzu nil nil nil nil nil nil] [cl-struct-cask-dependency ace-window nil nil nil nil nil nil]) nil "/home/vercapi/.emacs.d/" nil ([cl-struct-cask-source "marmalade" "http://marmalade-repo.org/packages/"] [cl-struct-cask-source "gnu" "http://elpa.gnu.org/packages/"] [cl-struct-cask-source "SC" "http://joseito.republika.pl/sunrise-commander/"] [cl-struct-cask-source "melpa" "http://melpa.milkbox.net/packages/"])]

   Init pallet, more info on [[https://github.com/rdallasgray/pallet][github]]
   This makes sure that packages installed via the package manager are added to the Cask file
   #+BEGIN_SRC emacs-lisp
   (require 'pallet)
   (pallet-mode t)
   #+END_SRC

   #+RESULTS:
   : t

   To update run pallet-update
 
** Custom tools

   #+BEGIN_SRC emacs-lisp
   (load "~/.emacs.d/custom/emacs-tools.el")
   #+END_SRC

* UI configuration
** General info
   
   #+BEGIN_SRC emacs-lisp
     (tool-bar-mode -1) ;; no toolbar
     (menu-bar-mode -1)
     (toggle-scroll-bar -1)
     (fset 'yes-or-no-p 'y-or-n-p) ;; type y/n not yes/no
   #+END_SRC

   #+RESULTS:
   : y-or-n-p

** Theme

    This is based on the [[https://github.com/nashamri/spacemacs-theme][spacemacs]] with the colors of [[http://eclipsecolorthemes.org/?view%3Dtheme&id%3D1115][solarized]]

    #+BEGIN_SRC emacs-lisp
      (load-file "~/.emacs.d/soranomacs-theme/spacemacs-theme-autoloads.el")
      (load-theme 'spacemacs-dark t)
    #+END_SRC

    #+RESULTS:
    : t

** mode line
   
    Standard configuration
    
    Set the file size on the mode line  
    #+BEGIN_SRC emacs-lisp
    (setq size-indication-mode t)
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
    (setq column-number-mode t)
    (size-indication-mode) ;; show filesize
    #+END_SRC
    
*** Powerline
     
     Activate powerline with the default theme

     You need to use patched fonts -> 
     git clone https://github.com/powerline/fonts

     #+BEGIN_SRC emacs-lisp
       (require 'powerline)
       (powerline-default-theme)
       (setq powerline-default-separator 'slant)
     #+END_SRC

     #+RESULTS:
     : slant

** Mini bufer

   Turn ido mode on
   Ido is a better autocomplete on the 

   #+BEGIN_SRC emacs-lisp
   (require 'ido)
   (ido-mode t)
   #+END_SRC

** Text area

   Turn on line numbers in the gutter
    #+BEGIN_SRC emacs-lisp
    (setq column-number-mode t)
    #+END_SRC
    
** Fonts

   Set the standard fonts for emacs and other componets
   This is based on std configuration. So if emacs adds this again in init.el or .emacs things might break and this needs to be update manually

    #+BEGIN_SRC emacs-lisp
    (custom-set-faces
     '(default ((t (:family "DejaVu Sans Mono for Powerline" :foundry "unknown" :slant normal :weight normal :height 140 :width normal))))
     '(minimap-font-face ((t (:height 40 :family "DejaVu Sans Mono"))))
     '(mode-line ((t (:family "DejaVu Sans Mono for Powerline" :foundry "unknown" :slant normal :weight normal :height 140 :width normal)))))
    #+END_SRC

** alarms
    
    Turning them off completely
    #+BEGIN_SRC emacs-lisp
    (setq ring-bell-function 'ignore)
    #+END_SRC

    #+RESULTS:
    : ignore

** Window configuration
   
*** Winner mode
    Undo and redo the configuration of the windows

    #+BEGIN_SRC emacs-lisp
      (winner-mode 1) 
      (windmove-default-keybindings) ;; Set S-<arrows> to move around the windows (S- <arrow> to move along windows)
    #+END_SRC

*** Ace window
    [[https://github.com/abo-abo/ace-window][on github]]
    Do selective switching

    #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "<f12>") 'ace-window)
    #+END_SRC

* Basic configuration
   
   Removing splash screen
   Set line numbers in gutter
   All backup files are located in 1 directory
   Start emacs server so files can be opened in the running instance
   Set username and address

   #+BEGIN_SRC emacs-lisp
     (setq inhibit-splash-screen t)
     (global-linum-mode t)
     (setq backup-directory-alist '(("." . "~/.saves")))
     (server-start)
     (setq user-full-name "Pieter Vercammen")
     (setq user-mail-address "pieterv.sorano@gmail.com")
   #+END_SRC

*** Locale Settings

#+BEGIN_SRC emacs-lisp
   (set-language-environment 'utf-8)
   (set-terminal-coding-system 'utf-8)
   (setq locale-coding-system 'utf-8)
   (set-default-coding-systems 'utf-8)
   (set-selection-coding-system 'utf-8)
   (prefer-coding-system 'utf-8)
#+END_SRC

* Tramp

   Make tramp use ssh, for multi hops
   #+BEGIN_SRC emacs-lisp
     (require 'tramp)
     (setq tramp-default-method "ssh")
   #+END_SRC

   #+RESULTS:
   : ssh

   Add the needed hosts because mutli hop doesn't work with helm
   Also because mutli hop is a lot of typing for hosts that are used all the time

   Format of tripple is: HOST USER PROXY
   #+BEGIN_SRC emacs-lisp
          (add-to-list 'tramp-default-proxies-alist
                    '("\\`192.168.1.2\\'" "\\`root\\'" "/ssh:sorano@%h:"))
          (add-to-list 'tramp-default-proxies-alist
                    '("\\`192.168.1.252\\'" "\\`root\\'" "/ssh:alarm@%h:"))
   #+END_SRC

   #+RESULTS:
   | \`192.168.1.252\' | \`root\' | /ssh:alarm@%h:  |
   | \`192.168.1.2\'   | \`root\' | /ssh:sorano@%h: |

   Set the timout of ssh
   #+BEGIN_SRC emacs-lisp
     (setq password-cache-expiry 1200)
   #+END_SRC
   
* CEDET
** Iinitialize CEDET

    #+BEGIN_SRC emacs-lisp
      ;;(load-file "~/.emacs.d/cedet-bzr/trunk/cedet-devel-load.el") 
      ;;(add-to-list 'semantic-default-submodes 'global-semantic-idle-summary-mode t)
      ;;(add-to-list 'semantic-default-submodes 'global-semantic-idle-completions-mode t)
      ;;(add-to-list 'semantic-default-submodes 'global-cedet-m3-minor-mode t)
      ;;(add-to-list 'semantic-default-submodes 'global-semantic-highlight-func-mode t)
      ;;(semantic-mode 1)                        ; Enable semantic

      ;; load contrib library
      ;;(load-file "~/.emacs.d/cedet-bzr/trunk/contrib/cedet-contrib-load.el")
    #+END_SRC

    #+RESULTS:

* Org Mode
** General settings
[[http://orgmode.org/manual/Conflicts.html][
    Confliction manual org-mode]]
    
    Make sure we don't have a conflict with S-arrow keys
    Now org mode S-arrows switches windows when there is no relevant action for the org-mode bound command
    #+BEGIN_SRC emacs-lisp
      (setq org-replace-disputed-keys t)
      (add-hook 'org-shiftup-final-hook 'windmove-up)
      (add-hook 'org-shiftleft-final-hook 'windmove-left)
      (add-hook 'org-shiftdown-final-hook 'windmove-down)
      (add-hook 'org-shiftright-final-hook 'windmove-right)
    #+END_SRC
    
    #+RESULTS:
    | windmove-right |

    Introduce some backward compatibility
    #+BEGIN_SRC emacs-lisp
    (define-obsolete-function-alias 'org-define-error 'define-error)
    #+END_SRC

    #+RESULTS:
    : org-define-error

** Display settings

    #+BEGIN_SRC emacs-lisp
      (setq org-src-fontify-natively t)
    #+END_SRC

** Code blocks

    Set languages that can be executed
    
    #+BEGIN_SRC emacs-lisp
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((python . t)
         (shell . t)
         (emacs-lisp . t)
         ))
    #+END_SRC
    
    Set it so that code executes without asking permission when pressing C-c C-c
    
    #+BEGIN_SRC emacs-lisp
    (setq org-confirm-babel-evaluate nil)
    #+END_SRC
    
    Set python version
    #+BEGIN_SRC emacs-lisp
    (setq org-babel-python-command "python2")
    #+END_SRC

    Enable async execution of babel code blocks
    #+BEGIN_SRC emacs-lisp
    (require 'ob-async)
    #+END_SRC

** Keymaps

    #+BEGIN_SRC emacs-lisp
      (add-hook 'org-mode-hook
                (lambda ()
                  (require 'hydra)
                  (defhydra hydra-org-navigation (org-mode-map "<f2>")
                    "Org navigation"
                    ("n" outline-next-visible-heading)
                    ("p" outline-previous-visible-heading)
                    ("f" org-forward-heading-same-level)
                    ("b" org-backward-heading-same-level)
                    ("a" helm-org-in-buffer-headings)
                    ("u" outline-up-heading))
                  (local-set-key (kbd "<f7>") 'org-mark-ring-push)
                  (local-set-key (kbd "C-<f7>") 'org-mark-ring-goto)))
    #+END_SRC

#+RESULTS:
| (lambda nil (require (quote hydra)) (defhydra hydra-org-navigation (org-mode-map <f2>) Org navigation (n outline-next-visible-heading) (p outline-previous-visible-heading) (f org-forward-heading-same-level) (b org-backward-heading-same-level) (a helm-org-in-buffer-headings) (u outline-p-heading)) (local-set-key (kbd <f7>) (quote org-mark-ring-push)) (local-set-key (kbd C-<f7>) (quote org-mark-ring-goto))) | er/add-org-mode-expansions | (lambda nil (require (quote hydra)) (progn (set (defvar hydra-org-navigation/keymap nil Keymap for hydra-org-navigation.) (quote (keymap (97 . hydra-org-navigation/helm-org-in-buffer-headings) (98 . hydra-org-navigation/org-backward-heading-same-level) (102 . hydra-org-navigation/org-forward-heading-same-level) (112 . hydra-org-navigation/outline-previous-visible-heading) (110 . hydra-org-navigation/outline-next-visible-heading) (kp-subtract . hydra--negative-argument) (kp-9 . hydra--digit-argument) (kp-8 . hydra--digit-argument) (kp-7 . hydra--digit-argument) (kp-6 . hydra--digit-argument) (kp-5 . hydra--digit-argument) (kp-4 . hydra--digit-argument) (kp-3 . hydra--digit-argument) (kp-2 . hydra--digit-argument) (kp-1 . hydra--digit-argument) (kp-0 . hydra--digit-argument) (57 . hydra--digit-argument) (56 . hydra--digit-argument) (55 . hydra--digit-argument) (54 . hydra--digit-argument) (53 . hydra--digit-argument) (52 . hydra--digit-argument) (51 . hydra--digit-argument) (50 . hydra--digit-argument) (49 . hydra--digit-argument) (48 . hydra--digit-argument) (45 . hydra--negative-argument) (21 . hydra--universal-argument)))) (set (defvar hydra-org-navigation/heads nil Heads for hydra-org-navigation.) (quote ((n outline-next-visible-heading  :exit nil) (p outline-previous-visible-heading  :exit nil) (f org-forward-heading-same-level  :exit nil) (b org-backward-heading-same-level  :exit nil) (a helm-org-in-buffer-headings  :exit nil)))) (set (defvar hydra-org-navigation/hint nil Dynamic hint for hydra-org-navigation.) (quote (format Org navigation: n, p, f, b, a.))) (defalias (quote hydra-org-navigation/outline-next-visible-heading) (function (lambda nil Create a hydra with a "<f2>" body and the heads:\n\n"n":    `outline-next-visible-heading',\n"p":    `outline-previous-visible-heading',\n"f":    `org-forward-heading-same-level',\n"b":    `org-backward-heading-same-level',\n"a":    `helm-org-in-buffer-headings'\n\nThe body can be accessed via `hydra-org-navigation/body'.\n\nCall the head: `outline-next-visible-heading'. (interactive) (hydra-default-pre) (let ((hydra--ignore t)) (hydra-keyboard-quit) (setq hydra-curr-body-fn (quote hydra-org-navigation/body))) (condition-case err (progn (setq this-command (quote outline-next-visible-heading)) (hydra--call-interactively-remap-maybe (function outline-next-visible-heading))) ((quit error) (message (error-message-string err)) (if hydra-lv nil (sit-for 0.8)))) (hydra-show-hint hydra-org-navigation/hint (quote hydra-org-navigation)) (hydra-set-transient-map hydra-org-navigation/keymap (function (lambda nil (hydra-keyboard-quit) nil)) nil)))) (defalias (quote hydra-org-navigation/outline-previous-visible-heading) (function (lambda nil Create a hydra with a "<f2>" body and the heads:\n\n"n":    `outline-next-visible-heading',\n"p":    `outline-previous-visible-heading',\n"f":    `org-forward-heading-same-level',\n"b":    `org-backward-heading-same-level',\n"a":    `helm-org-in-buffer-headings'\n\nThe body can be accessed via `hydra-org-navigation/body'.\n\nCall the head: `outline-previous-visible-heading'. (interactive) (hydra-default-pre) (let ((hydra--ignore t)) (hydra-keyboard-quit) (setq hydra-curr-body-fn (quote hydra-org-navigation/body))) (condition-case err (progn (setq this-command (quote outline-previous-visible-heading)) (hydra--call-interactively-remap-maybe (function outline-previous-visible-heading))) ((quit error) (message (error-message-string err)) (if hydra-lv nil (sit-for 0.8)))) (hydra-show-hint hydra-org-navigation/hint (quote hydra-org-navigation)) (hydra-set-transient-map hydra-org-navigation/keymap (function (lambda nil (hydra-keyboard-quit) nil)) nil)))) (defalias (quote hydra-org-navigation/org-forward-heading-same-level) (function (lambda nil Create a hydra with a "<f2>" body and the heads:\n\n"n":    `outline-next-visible-heading',\n"p":    `outline-previous-visible-heading',\n"f":    `org-forward-heading-same-level',\n"b":    `org-backward-heading-same-level',\n"a":    `helm-org-in-buffer-headings'\n\nThe body can be accessed via `hydra-org-navigation/body'.\n\nCall the head: `org-forward-heading-same-level'. (interactive) (hydra-default-pre) (let ((hydra--ignore t)) (hydra-keyboard-quit) (setq hydra-curr-body-fn (quote hydra-org-navigation/body))) (condition-case err (progn (setq this-command (quote org-forward-heading-same-level)) (hydra--call-interactively-remap-maybe (function org-forward-heading-same-level))) ((quit error) (message (error-message-string err)) (if hydra-lv nil (sit-for 0.8)))) (hydra-show-hint hydra-org-navigation/hint (quote hydra-org-navigation)) (hydra-set-transient-map hydra-org-navigation/keymap (function (lambda nil (hydra-keyboard-quit) nil)) nil)))) (defalias (quote hydra-org-navigation/org-backward-heading-same-level) (function (lambda nil Create a hydra with a "<f2>" body and the heads:\n\n"n":    `outline-next-visible-heading',\n"p":    `outline-previous-visible-heading',\n"f":    `org-forward-heading-same-level',\n"b":    `org-backward-heading-same-level',\n"a":    `helm-org-in-buffer-headings'\n\nThe body can be accessed via `hydra-org-navigation/body'.\n\nCall the head: `org-backward-heading-same-level'. (interactive) (hydra-default-pre) (let ((hydra--ignore t)) (hydra-keyboard-quit) (setq hydra-curr-body-fn (quote hydra-org-navigation/body))) (condition-case err (progn (setq this-command (quote org-backward-heading-same-level)) (hydra--call-interactively-remap-maybe (function org-backward-heading-same-level))) ((quit error) (message (error-message-string err)) (if hydra-lv nil (sit-for 0.8)))) (hydra-show-hint hydra-org-navigation/hint (quote hydra-org-navigation)) (hydra-set-transient-map hydra-org-navigation/keymap (function (lambda nil (hydra-keyboard-quit) nil)) nil)))) (defalias (quote hydra-org-navigation/helm-org-in-buffer-headings) (function (lambda nil Create a hydra with a "<f2>" body and the heads:\n\n"n":    `outline-next-visible-heading',\n"p":    `outline-previous-visible-heading',\n"f":    `org-forward-heading-same-level',\n"b":    `org-backward-heading-same-level',\n"a":    `helm-org-in-buffer-headings'\n\nThe body can be accessed via `hydra-org-navigation/body'.\n\nCall the head: `helm-org-in-buffer-headings'. (interactive) (hydra-default-pre) (let ((hydra--ignore t)) (hydra-keyboard-quit) (setq hydra-curr-body-fn (quote hydra-org-navigation/body))) (condition-case err (progn (setq this-command (quote helm-org-in-buffer-headings)) (hydra--call-interactively-remap-maybe (function helm-org-in-buffer-headings))) ((quit error) (message (error-message-string err)) (if hydra-lv nil (sit-for 0.8)))) (hydra-show-hint hydra-org-navigation/hint (quote hydra-org-navigation)) (hydra-set-transient-map hydra-org-navigation/keymap (function (lambda nil (hydra-keyboard-quit) nil)) nil)))) (if (keymapp (lookup-key org-mode-map (kbd <f2>))) nil (define-key org-mode-map (kbd <f2>) nil)) (define-key org-mode-map [f2 110] (quote hydra-org-navigation/outline-next-visible-heading)) (define-key org-mode-map [f2 112] (quote hydra-org-navigation/outline-previous-visible-heading)) (define-key org-mode-map [f2 102] (quote hydra-org-navigation/org-forward-heading-same-level)) (define-key org-mode-map [f2 98] (quote hydra-org-navigation/org-backward-heading-same-level)) (define-key org-mode-map [f2 97] (quote hydra-org-navigation/helm-org-in-buffer-headings)) (defalias (quote hydra-org-navigation/body) (function (lambda nil Create a hydra with a "<f2>" body and the heads:\n\n"n":    `outline-next-visible-heading',\n"p":    `outline-previous-visible-heading',\n"f":    `org-forward-heading-same-level',\n"b":    `org-backward-heading-same-level',\n"a":    `helm-org-in-buffer-headings'\n\nThe body can be accessed via `hydra-org-navigation/body'. (interactive) (hydra-default-pre) (let ((hydra--ignore nil)) (hydra-keyboard-quit) (setq hydra-curr-body-fn (quote hydra-org-navigation/body))) (hydra-show-hint hydra-org-navigation/hint (quote hydra-org-navigation)) (hydra-set-transient-map hydra-org-navigation/keymap (function (lambda nil (hydra-keyboard-quit) nil)) nil) (setq prefix-arg current-prefix-arg))))) (local-set-key (kbd <f7>) (quote org-mark-ring-push)) (local-set-key (kbd C-<f7>) (quote org-mark-ring-goto))) | #[nil \300\301\302\303\304$\207 [org-add-hook change-major-mode-hook org-show-block-all append local] 5] | #[nil \300\301\302\303\304$\207 [org-add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes |
     
** TODO Nice bullets
* helm
[[http://tuhdo.github.io/helm-intro.html][    Helm tutorial]]
    
** General config

    #+BEGIN_SRC emacs-lisp
      (require 'helm-config)
      (helm-mode 1)
    
      (setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
            helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
            helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
            helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
            helm-ff-file-name-history-use-recentf t)
    
      (helm-mode 1)
    
      (when (executable-find "curl")
          (setq helm-google-suggest-use-curl-p t))
    #+END_SRC

    #+RESULTS:
    : t

** Key bindings

    #+BEGIN_SRC emacs-lisp
      (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
      (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
      (define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z
      (global-set-key (kbd "C-x b") 'helm-mini)
      (global-set-key (kbd "C-x C-f") 'helm-find-files)
      (global-set-key (kbd "C-c h o") 'helm-occur)
      (global-set-key (kbd "C-c h g") 'helm-google-suggest)
      (global-set-key (kbd "M-x") 'helm-M-x)
      (define-key helm-map (kbd "M-y") 'helm-show-kill-ring)
    #+END_SRC
    
    #+RESULTS:
    : helm-show-kill-ring

* TODO Python
  The curren setup has too many issues. Try [[http://ericjmritz.name/2015/11/06/gnu-emacs-packages-for-python-programming/][this]]

  Setup python environment

  Setting everything to use python 2
  #+BEGIN_SRC emacs-lisp
    (setq python-version-checked t)
    (setenv "PYMACS_PYTHON" "python2")
    (setq python-python-command "python2")
    (setq py-shell-name "/usr/bin/python2")
    (setq py-python-command "/usr/bin/python2")
    (setq python-environment-virtualenv (list "virtualenv2" "--system-site-packages" "--quiet"))
  #+END_SRC

  #+RESULTS:
  | virtualenv | --system-site-packages | --quiet |

** TODO Python version switch
** TODO Python virtualenv
** Python code assist
*** pymacs

Initialize pymacs
Pymacs is an interface between emacs and python.

#+BEGIN_SRC emacs-lisp
(autoload 'pymacs-apply "pymacs")
(autoload 'pymacs-call "pymacs")
(autoload 'pymacs-eval "pymacs" nil t)
(autoload 'pymacs-exec "pymacs" nil t)
(autoload 'pymacs-load "pymacs" nil t)
(autoload 'pymacs-autoload "pymacs")
#+END_SRC

*** ropemacs 

intialize ropemacs
ropemacs is a refactoring framework for python

#+BEGIN_SRC emacs-lisp
(pymacs-load "ropemacs" "rope-")
#+END_SRC

*** TODO Generating code
    [[https://github.com/JackCrawley/pygen][pygen]] 
** jedi

Initalize jedi
Jedi is an autocomplete tool for python

#+BEGIN_SRC emacs-lisp
(require 'jedi)
(add-hook 'python-mode-hook 'jedi:setup)
#+END_SRC

This actually makes sure jedi uses the "two" virtual env. Because this is a python 2 environment we need to use the virtualenv2 command.
Directory: ~/.emacs.d/.python-environments/two
Create virtualenv with: "virtualenv2 --system-site-packages two" in the "~/.emacs.d/.python-environments" directory
When switching environments execute "jedi:install-server" again in emacs

#+BEGIN_SRC emacs-lisp
(setq jedi:environment-root "two")
(setq jedi:environment-virtualenv
      (append "virtualenv2"
              '("--python" "/usr/bin/python2")))
#+END_SRC

** TODO py-tests, this should become nose
Custom el code to run standard tests right from emacs

#+BEGIN_SRC emacs-lisp
(load "~/.emacs.d/custom/py-tests.el")
#+END_SRC

** python-tools

Some random collection of tools to use with python

#+BEGIN_SRC emacs-lisp
(load "~/.emacs.d/custom/py-tests.el")
#+END_SRC

#+RESULTS:
: t

** TODO python keymaps, hook to python mode

Below should only be activated in a python file
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c j") 'jedi:goto-definition)
  (global-set-key (kbd "C-c d") 'jedi:show-doc)
  (global-set-key (kbd "<C-tab>") 'company-jedi)
  (global-set-key (kbd "C-c h p") 'helm-pydoc)
#+END_SRC

#+RESULTS:
: helm-pydoc

** TODO check pycscope
   Inside and navigation into python code
   [[https://github.com/portante/pycscope][github]]

* lua/awesome
  These are the customizations for lua. Especially for development of awesome

** Tools

   Tools for writing lua

   #+BEGIN_SRC emacs-lisp
   (load "~/.emacs.d/custom/lua-tools.el")   
   #+END_SRC

   #+RESULTS:
   : t

** Tests
  
   Depends on [[https://github.com/siffiejoe/lua-testy][lua-testy]]

   #+BEGIN_SRC emacs-lisp
     (load "~/.emacs.d/custom/lua-tests.el")
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (defun lua-mode-config ()
       "Change some settings when lua mode is loaded"
       (local-set-key (kbd "C-c C-t") 'lua-test)
       )

     (add-hook 'lua-mode-hook 'lua-mode-config)
   #+END_SRC

   #+RESULTS:
   | lua-mode-config |
   
* TODO Java
  https://github.com/jdee-emacs/jde
  http://www.skybert.net/emacs/java/
* Navigation
** Beacon

   Enable beacon a flash when your cursor jumps [[https://github.com/Malabarba/beacon][on github]]
   
   #+BEGIN_SRC emacs-lisp
     (beacon-mode 1)
   #+END_SRC

   #+RESULTS:
   : t

** avy (jump to x)

   avy lets you jump directrly to one or a combination of 2 characters or to a line
   Intialize avy
   https://github.com/abo-abo/avy

   #+BEGIN_SRC emacs-lisp
     (avy-setup-default)
     (global-set-key (kbd "C-:") 'avy-goto-char)
     (global-set-key (kbd "C-'") 'avy-goto-char-2)
   #+END_SRC
   
   #+RESULTS:
   : avy-goto-line

** sr-speedbar

   Speedbar is a tool that creates a window and shows speedbar inside
   Initialize sr-speedbar

   #+BEGIN_SRC emacs-lisp
   (require 'sr-speedbar)
   #+END_SRC

** Navigation keymaps
   
   Some global keymaps
   
   Keybindings for scrolling without moving the cursor
   
   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "M-n") (kbd "C-u 1 C-v"))
   (global-set-key (kbd "M-p") (kbd "C-u 1 M-v"))
   #+END_SRC
   
** Goto-change
   
   #+BEGIN_SRC emacs-lisp
     (require 'goto-chg)
     (global-set-key (kbd "C-c p") 'goto-last-change)
     (global-set-key (kbd "C-c n") 'goto-last-change-reverse)
   #+END_SRC

   #+RESULTS:
   : goto-last-change-reverse

** Go back

   Ensure that going back using C-U C-SPC actually moves to a different location every time it is invoked
   #+BEGIN_SRC emacs-lisp
     (defun my/multi-pop-to-mark (orig-fun &rest args)
       "Call ORIG-FUN until the cursor moves.
        Try the repeated popping up to 10 times."
       (let ((p (point)))
         (dotimes (i 10)
           (when (= p (point))
             (apply orig-fun args)))))
     (advice-add 'pop-to-mark-command :around
                 #'my/multi-pop-to-mark)
   #+END_SRC

   Make repeating C-u C-SPC, C-u C-SPC like C-u C-SPC, C-SPC
   #+BEGIN_SRC emacs-lisp
   (setq set-mark-command-repeat-pop t)
   #+END_SRC

   #+RESULTS:
   : t

* Blogging/writing
** olivetti mode
   on [[https://github.com/rnkn/olivetti][github]]   
* Text Editing
** Standard editor settings
   
   #+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil) ;; don't use tabs
  (setq-default tab-width 2) ;; use 2 space tabs
  (global-hl-line-mode 1) ;; highlight current line
   #+END_SRC

** autocomplete
   
   hippie-expand to expand a sentence or a code block
   
   auto complete is done by company-mode
   [[http://company-mode.github.io/][Documentation]]

   #+BEGIN_SRC emacs-lisp
    (add-hook 'after-init-hook 'global-company-mode)
   #+END_SRC

   Company mode backends
   #+BEGIN_SRC emacs-lisp
     (with-eval-after-load 'company
       (add-to-list 'company-backends 'company-shell))
   #+END_SRC

   #+RESULTS:
   | company-shell | company-bbdb | company-nxml | company-css | company-eclim | company-semantic | company-clang | company-xcode | company-cmake | company-capf | company-files | (company-dabbrev-code company-gtags company-etags company-keywords) | company-oddmuse | company-dabbrev |

** undo

   An advanced undo system

   #+BEGIN_SRC emacs-lisp
   (global-undo-tree-mode t)
   (setq undo-tree-visualizer-relative-timestamps t)
   (setq undo-tree-visualizer-timestamps t)
   #+END_SRC

** parenthesis
   
   Automagically pair braces and quotes like TextMate
   #+BEGIN_SRC emacs-lisp
     (electric-pair-mode)
   #+END_SRC

   Show matching parentheses

   #+BEGIN_SRC emacs-lisp
   (setq show-paren-mode t)
   #+END_SRC

   I don't want numerous colors for every parenthesis.
   I only want to see the non matching parenthesis

   #+BEGIN_SRC emacs-lisp
     (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
     (require 'rainbow-delimiters)
     (setq rainbow-delimiters-max-face-count 1)
     (set-face-attribute 'rainbow-delimiters-unmatched-face nil
                         :foreground 'unspecified
                         :inherit 'error)
   #+END_SRC

   Move by parenthesis as per http://ergoemacs.org/emacs/emacs_navigating_keys_for_brackets.html

   #+BEGIN_SRC emacs-lisp
     (load "~/.emacs.d/custom/brackets-movement.el")
   
     (global-set-key (kbd "C-(") 'xah-backward-left-bracket)
     (global-set-key (kbd "C-)") 'xah-forward-right-bracket)
   #+END_SRC

#+RESULTS:
: xah-forward-right-bracket

** Multiple cursors

Mutliple cursors does what it says

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-M->") 'mc/unmark-next-like-this)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-M-<") 'mc/unmark-previous-like-this)
  (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
#+END_SRC

** Selection

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-=") 'er/expand-region)
#+END_SRC

** Copy paste
   Custom el to change behavior of std copy/cut paste behavior
   Some code based on xah-lee's version on http://ergoemacs.org/emacs/emacs_copy_cut_current_line.html

   #+BEGIN_SRC emacs-lisp
   (load "~/.emacs.d/custom/copy-paste-behavior.el")
   
   (global-set-key (kbd "C-w") 'custom-cut-line-or-region) ; cut
   (global-set-key (kbd "M-w") 'custom-copy-line-or-region) ; copy
   #+END_SRC


   #+RESULTS:
   : xah-copy-line-or-region

** YaSnippet

   Enable yasnippet on startup for all mode
   #+BEGIN_SRC emacs-lisp
     (yas-global-mode 1)
   #+END_SRC

** Spelling and autocorrect
   
   For enabling spelling for a specific mode this is needed
   (add-hook 'text-mode-hook 'flyspell-mode)

   #+BEGIN_SRC shell
   sudo pacman -S aspell-en
   #+END_SRC

*** Typo correctors
    
Enable auto correction for dubble typed CApitals
Found on stack exchange ...
#+BEGIN_SRC emacs-lisp
  (load "~/.emacs.d/custom/typo-correct.el")
  (dubcaps-mode)
#+END_SRC

#+RESULTS:
: t

Enable autocorrect with suggestions to correct instea of retyping
Found at: http://endlessparentheses.com/ispell-and-abbrev-the-perfect-auto-correct.html
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c c") 'endless/ispell-word-then-abbrev)
#+END_SRC

#+RESULTS:
: endless/ispell-word-then-abbrev

** Query and Replace

#+BEGIN_SRC emacs-lisp
  (global-anzu-mode)
  (global-set-key (kbd "M-%") 'anzu-query-replace)
  (global-set-key (kbd "C-M-%") 'anzu-query-replace-regexp)
#+END_SRC

#+RESULTS:
: anzu-query-replace-regexp

*** TODO Replace should always start at the beginning of the buffer
    
** Behavior
   
   subword-mode enables camel casing

   #+BEGIN_SRC emacs-lisp
     (global-syntax-subword-mode)
   #+END_SRC

* Search
  
  Find in file(s)
  - occur
  - helm-occur
  - helm-multi-occur
   
* Code
** Code checker
   Changed the default flymake with flycheck on [[https://github.com/flycheck/flycheck][github]]
   
   enable it
   #+BEGIN_SRC emacs-lisp
   (add-hook 'after-init-hook #'global-flycheck-mode)
   #+END_SRC

   #+RESULTS:
   | global-flycheck-mode | global-company-mode | x-wm-set-size-hint |

** Comments
  
   Comments line and regions without breaking the line. And it can uncomment again.
   Soruce: [[http://endlessparentheses.com/implementing-comment-line.html][blog]]
   #+BEGIN_SRC emacs-lisp
     (defun endless/comment-line-or-region (n)
       "Comment or uncomment current line and leave point after it.
        With positive prefix, apply to N lines including current one.
        With negative prefix, apply to -N lines above.
        If region is active, apply to active region instead."
       (interactive "p")
       (if (use-region-p)
           (comment-or-uncomment-region
            (region-beginning) (region-end))
         (let ((range
                (list (line-beginning-position)
                      (goto-char (line-end-position n)))))
           (comment-or-uncomment-region
            (apply #'min range)
            (apply #'max range)))
         (forward-line 1)
         (back-to-indentation)))
   #+END_SRC

   #+RESULTS:
   : endless/comment-line-or-region

   Set keyboard binding
   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "C-;") #'endless/comment-line-or-region)
   #+END_SRC

   #+RESULTS:
   : endless/comment-line-or-region

** elisp
   
   autocompletion with litable
   [[https://github.com/Fuco1/litable][github page]]

** Completion LSP
   
   #+BEGIN_SRC emacs-lisp
   (require 'lsp-java)
   (add-hook 'java-mode-hook #'lsp-java-enable)
   #+END_SRC

   #+RESULTS:

* Projects
  
  Projectile is the project mgmt tool

**  helm-projectile

    [[http://tuhdo.github.io/helm-projectile.html][helm projectile]]

    key bindingd
    #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-c r h") 'helm-projectile)
    #+END_SRC

    #+RESULTS:
    : helm-projectile

* Eshell

  enable helm autocompletion

  #+BEGIN_SRC emacs-lisp
    (add-hook 'eshell-mode-hook
              '(lambda ()
                 (define-key eshell-mode-map (kbd "C-c C-l")  'helm-eshell-history)))
  #+END_SRC

  #+RESULTS:
  | lambda | nil | (define-key eshell-mode-map (kbd C-c C-l) (quote helm-eshell-history)) |
  |        |     |                                                                        |
* Magit
  
  git tool for emacs [[https://github.com/magit/magit][on github]]
  
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-x t") 'magit-status)
  #+END_SRC

  #+RESULTS:
  : magit-status
  
  Saving typed messages

  #+BEGIN_SRC emacs-lisp
    (load-file "~/.emacs.d/custom/message-history.el")

    (defun message-add ()
      "Actually add the message"
      (message-history/add message-history/message-history-file))

    (defun message-commit-setup ()
      "Setting up the buffer so that it will save the messages"
      (add-hook 'before-save-hook 'message-add nil t)
      )

    (add-hook 'git-commit-mode-hook 'message-commit-setup)
  #+END_SRC

  #+RESULTS:
  | message-commit-setup |

* Spreadsheet
  *.ses file
  [[https://www.gnu.org/software/emacs/manual/html_mono/ses.html#Quick-Tutorial][SES documentation]]
* TODO Evernote
* Directories
  
  Dired is the standard in emacs
  ztree is a tree browser
  
* Files
** Edit current buffer as root
    
    find-file-at-point to find a file at point
 
    #+BEGIN_SRC emacs-lisp
      (defun sudo-edit (&optional arg)
        "Edit currently visited file as root. With a prefix ARG prompt for a file to visit. Will also prompt for a file to visit if current buffer is not visiting a file."
        (interactive "P")
        (if (or arg (not buffer-file-name))
            (find-file (concat "/sudo:root@localhost:" (ido-read-file-name "Find file(as root): ")))
          (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))
          )
        )
    #+END_SRC

    #+RESULTS:
    : sudo-edit

* Emacs general   
** Files
   When open files remain on exiting, pressing 'd' will show the diff
** Characters and unicode

   #+BEGIN_SRC emacs-lisp
     (require 'xah-math-input)
     (define-key xah-math-input-keymap (kbd "C-<tab>") 'xah-math-input-change-to-symbol)
   #+END_SRC

   #+RESULTS:
   : xah-math-input-change-to-symbol

** Links

   [[http://emacs.sexy/][EmacsIsSexy]]
   
** Help
*** which-key

    [[https://github.com/justbur/emacs-which-key#introduction][on github]]

    Automatically show the possible key completions in emacs
    
    #+BEGIN_SRC emacs-lisp
    (which-key-mode)
    #+END_SRC

    #+RESULTS:
    : t

* PDF

  On [[https://github.com/politza/pdf-tools][github]]. Additional installation steps and dependencies are needed (pdf-tools-install)
  
  #+BEGIN_SRC emacs-lisp
  (pdf-tools-install)
  #+END_SRC

* SVN

  Initiate svn mode
  #+BEGIN_SRC emacs-lisp
  (require 'dsvn)
  #+END_SRC

* Docker

  For manageing dockers there are 3 packages:
  - docker-mode for editing files
  - docker for managing docker (can use tramp, needed for root access, but can also be used on other hosts)
  - docker-tramp to have tramp like access to dockers /docker:<docker-name>:/home/

* Ediff

** Enable using both code blocks

   #+BEGIN_SRC emacs-lisp
     (defun ediff-copy-both-to-C ()
       (interactive)
       (ediff-copy-diff ediff-current-difference nil 'C nil
                        (concat
                         (ediff-get-region-contents ediff-current-difference 'A ediff-control-buffer)
                         (ediff-get-region-contents ediff-current-difference 'B ediff-control-buffer))))

     (defun ediff-copy-both-to-C-b-first ()
       (interactive)
       (ediff-copy-diff ediff-current-difference nil 'C nil
                        (concat
                         (ediff-get-region-contents ediff-current-difference 'B ediff-control-buffer)
                         (ediff-get-region-contents ediff-current-difference 'A ediff-control-buffer))))

     (defun add-d-to-ediff-mode-map ()
       (define-key ediff-mode-map "d" 'ediff-copy-both-to-C)
       (define-key ediff-mode-map "D" 'ediff-copy-both-to-C-b-first))
     (add-hook 'ediff-keymap-setup-hook 'add-d-to-ediff-mode-map)
   #+END_SRC

   #+RESULTS:
   | add-d-to-ediff-mode-map |

