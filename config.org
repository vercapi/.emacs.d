#+TITLE: Emacs Configuration
#+OPTIONS: toc:4 h:4m 

* General Emacs Settings
  
** UI configuration
*** Emacs window (Frame in emacs terminology)
   Removing menu bar, toolbar and scollbar
  
#+BEGIN_SRC emacs-lisp
  (when (fboundp 'menu-bar-mode) (menu-bar-mode -1))
  (when (fboundp 'tool-bar-mode) (tool-bar-mode -1))
  (when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
#+END_SRC  

*** mode line
    Set the file size on the mode line  
#+BEGIN_SRC emacs-lisp
(setq size-indication-mode t)
#+END_SRC

*** Mini bufer

    Turn ido mode on
    Ido is a better autocomplete on the 

#+BEGIN_SRC emacs-lisp
(require 'ido)
(ido-mode t)
#+END_SRC

   Turn on line numbers in the gutter
*** Text area

#+BEGIN_SRC emacs-lisp
(setq column-number-mode t)
#+END_SRC
    
*** Fonts
    Set the standard fonts for emacs and other componets
    This is based on std configuration. So if emacs adds this again in init.el or .emacs things might break and this needs to be update manually

#+BEGIN_SRC emacs-lisp
(custom-set-faces
 '(default ((t (:family "DejaVu Sans Mono for Powerline" :foundry "unknown" :slant normal :weight normal :height 140 :width normal))))
 '(mode-line ((t (:family "DejaVu Sans Mono for Powerline" :foundry "unknown" :slant normal :weight normal :height 140 :width normal)))))
#+END_SRC

** Standard configuration
   
   Removing splash screen
   Set line numbers in gutter
   All backup files are located in 1 directory
   Start emacs server so files can be opened in the running instance
   Set username and address

#+BEGIN_SRC emacs-lisp
  (setq inhibit-splash-screen t)
  (global-linum-mode t)
  (setq backup-directory-alist '(("." . "~/.saves")))
  (server-start)
  (setq user-full-name "Pieter Vercammen")
  (setq user-mail-address "pieterv.sorano@gmail.com")
#+END_SRC

** Window configuration
   
#+BEGIN_SRC emacs-lisp
  (winner-mode 1) 
  (windmove-default-keybindings) ;; Set S-<arrows> to move around the windows (S- <arrow> to move along windows)
#+END_SRC

   Commands for controlling windows
   C-c <-    : Restore configuration
   C-c ->    : Next configuration
   S-<arrow> : Move between windows
   
** Locale Settings

#+BEGIN_SRC emacs-lisp
   (set-language-environment 'utf-8)
   (set-terminal-coding-system 'utf-8)
   (setq locale-coding-system 'utf-8)
   (set-default-coding-systems 'utf-8)
   (set-selection-coding-system 'utf-8)
   (prefer-coding-system 'utf-8)
#+END_SRC
** Global editor settings

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil) ;; don't use tabs
  (setq-default tab-width 2) ;; use 2 space tabs
  (global-hl-line-mode 1) ;; highlight current line
  (show-paren-mode 1) ;; show matching parentheses
  (tool-bar-mode -1) ;; no toolbar
  (column-number-mode t)
  (size-indication-mode) ;; show filesize
  (fset 'yes-or-no-p 'y-or-n-p) ;; type y/n not yes/no
#+END_SRC

* Packages setup

  Initialize
#+BEGIN_SRC emacs-lisp
;; activate all the packages (in particular autoloads)
(package-initialize)
#+END_SRC
  
** Packages sources

#+BEGIN_SRC emacs-lisp
 (setq package-archives '(("melpa" . "http://melpa.milkbox.net/packages/")
                          ("marmalade" . "http://marmalade-repo.org/packages/")
                          ("SC" . "http://joseito.republika.pl/sunrise-commander/")
                          ("gnu" . "http://elpa.gnu.org/packages/")))
#+END_SRC

** List of packages
   
    package List and installation

#+BEGIN_SRC emacs-lisp
(setq package-list '(ecb goto-chg undo-tree expand-region f dash s flymake-lua flymake-python-pyflakes flymake-easy flymake-yaml flymake-easy goto-chg iy-go-to-char jedi python-environment deferred auto-complete popup epc ctable concurrent deferred lua-mode magit multiple-cursors nurumacs popup projectile pkg-info epl dash s pymacs python-environment deferred s sr-speedbar ssh sunrise-commander undo-tree yaml-mode powerline solarized-theme markdown-mode helm helm-pydoc helm-projectile helm-spotify olivetti litable anzu avy xah-math-input))

;; refresh package archive
(unless package-archive-contents
  (package-refresh-contents)e)

;; install the missing packages
(dolist (package package-list)
  (unless (package-installed-p package)
    (package-install package)))

#+END_SRC

#+RESULTS:
    
* CEDET
** Iinitialize CEDET

#+BEGIN_SRC emacs-lisp
(load-file "~/.emacs.d/cedet-bzr/trunk/cedet-devel-load.el") 
(add-to-list 'semantic-default-submodes 'global-semantic-idle-summary-mode t)
(add-to-list 'semantic-default-submodes 'global-semantic-idle-completions-mode t)
(add-to-list 'semantic-default-submodes 'global-cedet-m3-minor-mode t)
(add-to-list 'semantic-default-submodes 'global-semantic-highlight-func-mode t)
(semantic-mode 1)                        ; Enable semantic

;; load contrib library
(load-file "~/.emacs.d/cedet-bzr/trunk/contrib/cedet-contrib-load.el")
#+END_SRC

* ECB
  Emacs Code Browser
  Set the configurations for ECB
#+BEGIN_SRC emacs-lisp
(setq ecb-options-version "2.40")
(setq ecb-tip-of-the-day nil)
#+END_SRC
* Org Mode
** General settings
[[http://orgmode.org/manual/Conflicts.html][
Confliction manual org-mode]]

Make sure we don't have a conflict with S-arrow keys
Now org mode S-arrows switches windows when there is no relevant action for the org-mode bound command
#+BEGIN_SRC emacs-lisp
  (setq org-replace-disputed-keys t)
  (add-hook 'org-shiftup-final-hook 'windmove-up)
  (add-hook 'org-shiftleft-final-hook 'windmove-left)
  (add-hook 'org-shiftdown-final-hook 'windmove-down)
  (add-hook 'org-shiftright-final-hook 'windmove-right)
#+END_SRC

#+RESULTS:
| windmove-right |

** Display settings

#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC

** Code blocks

Set languages that can be executed

#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (sh . t)
     (emacs-lisp . t)
     ))
#+END_SRC

Set it so that code executes without asking permission when pressing C-c C-c

#+BEGIN_SRC emacs-lisp
(setq org-confirm-babel-evaluate nil)
#+END_SRC

Set python version
#+BEGIN_SRC emacs-lisp
(setq org-babel-python-command "python2")
#+END_SRC

** Keymaps
   
   | Key       | Function          | Explantion                                    |
   |-----------+-------------------+-----------------------------------------------|
   | C-c '     |                   | Edit code in own editor                       |
   | --links-- |                   |                                               |
   | C-c C-o   | org-open-at-point | Open link                                     |
   | C-c C-l   | org-create-link   | Create link                                   |
   |           |                   |                                               |
   | Moving    |                   |                                               |
   | C-c C-j   | org-goto          | Mode where you can easily navigate org buffer |
   |           |                   |                                               |
      
* helm
  [[http://tuhdo.github.io/helm-intro.html][Helm tutorial]]

  Helm is find first decide action later
  
  helm spotify

** General config

#+BEGIN_SRC emacs-lisp
  (require 'helm-config)
  (helm-mode 1)

  (setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
        helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
        helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
        helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
        helm-ff-file-name-history-use-recentf t)

  (helm-mode 1)

  (when (executable-find "curl")
      (setq helm-google-suggest-use-curl-p t))
#+END_SRC

#+RESULTS:
: t

** Key bindings

| key          | fuction                        | Explanation                             |
|--------------+--------------------------------+-----------------------------------------|
| M-y          | helm-show-kill-ring            |                                         |
| <tab> or C-i | helm-execute-persistent-action |                                         |
| C-z          | helm-select-action             | List of possible actions                |
| C-x c i      | helm-semantic-or-imenu         | Show semantic definitions in buffer     |
| C-x c m      | helm-man-woman                 |                                         |
| C-x c /      | helm-find                      | Search files starting in the active dir |
| C-c h o      | helm-occur                     | Occurences in current file              |
| C-c h g      | helm-google-suggest            |                                         |


#+BEGIN_SRC emacs-lisp
  (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
  (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
  (define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z
  (global-set-key (kbd "C-x b") 'helm-mini)
  (global-set-key (kbd "C-x C-f") 'helm-find-files)
  (global-set-key (kbd "C-c h o") 'helm-occur)
  (global-set-key (kbd "C-c h g") 'helm-google-suggest)
  (define-key helm-map (kbd "M-y") 'helm-show-kill-ring)
#+END_SRC

#+RESULTS:
: helm-show-kill-ring

* UI
** Theme

   https://github.com/bbatsov/solarized-emacs

#+BEGIN_SRC emacs-lisp
  (load-theme 'solarized-dark t)
#+END_SRC
   
** Powerline
   Activate powerline with the default theme

   You need to use patched fonts -> 
   git clone https://github.com/powerline/fonts

#+BEGIN_SRC emacs-lisp
  (require 'powerline)
  (powerline-default-theme)
#+END_SRC

* Python

  Setup python environment

Setting everything to use python 2
#+BEGIN_SRC emacs-lisp
  (setq python-version-checked t)
  (setenv "PYMACS_PYTHON" "python2")
  (setq python-python-command "python2")
  (setq py-shell-name "/usr/bin/python2")
  (setq py-python-command "/usr/bin/python2")
  (setq python-environment-virtualenv (list "virtualenv2" "--system-site-packages" "--quiet"))
#+END_SRC

** pymacs

Initialize pymacs
Pymacs is an interface between emacs and python.

#+BEGIN_SRC emacs-lisp
(autoload 'pymacs-apply "pymacs")
(autoload 'pymacs-call "pymacs")
(autoload 'pymacs-eval "pymacs" nil t)
(autoload 'pymacs-exec "pymacs" nil t)
(autoload 'pymacs-load "pymacs" nil t)
(autoload 'pymacs-autoload "pymacs")
#+END_SRC

** ropemacs 

intialize ropemacs
ropemacs is a refactoring framework for python

#+BEGIN_SRC emacs-lisp
(pymacs-load "ropemacs" "rope-")
#+END_SRC

** jedi

   Initalize jedi
   Jedi is an autocomplete tool for python

#+BEGIN_SRC emacs-lisp
(require 'jedi)
(add-hook 'python-mode-hook 'jedi:setup)
#+END_SRC

This actually makes sure jedi uses the "two" virtual env. Because this is a python 2 environment we need to use the virtualenv2 command.
Directory: ~/.emacs.d/.python-environments/two
Create virtualenv with: "virtualenv2 --system-site-packages two" in the "~/.emacs.d/.python-environments" directory
When switching environments execute "jedi:install-server" again in emacs

#+BEGIN_SRC emacs-lisp
(setq jedi:environment-root "two")
(setq jedi:environment-virtualenv
      (append "virtualenv2"
              '("--python" "/usr/bin/python2")))
#+END_SRC

** pyflakes

   Initialize pyflakes   
   pyflakes is a syntac checker for python

#+BEGIN_SRC emacs-lisp
(add-hook 'python-mode-hook 'flymake-python-pyflakes-load)
#+END_SRC

   Show info about error at point

#+BEGIN_SRC emacs-lisp
(defun flymake-show-error ()
      "Show error at point"
      (interactive)
      (let ((err (get-char-property (point) 'help-echo)))
        (when err
          (message err))))

(global-set-key (kbd "C-c i") 'flymake-show-error)
#+END_SRC

** py-tests
   Custom el code to run standard tests right from emacs
   
#+BEGIN_SRC emacs-lisp
(load "~/.emacs.d/custom/py-tests.el")
#+END_SRC

** python-tools

   Some random collection of tools to use with python

#+BEGIN_SRC emacs-lisp
(load "~/.emacs.d/custom/py-tests.el")
#+END_SRC

#+RESULTS:
: t

** python keymaps

   | Key     | Function   | Explanation               |
   |---------+------------+---------------------------|
   | C-c h p | helm-pydoc | Show python documentation |
   |         |            |                           |
   |         |            |                           |
   |         |            |                           |
   

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c J") 'semantic-ia-fast-jump)
  (global-set-key (kbd "C-c j") 'jedi:goto-definition)
  (global-set-key (kbd "C-c d") 'jedi:show-doc)
  (global-set-key (kbd "<C-tab>") 'jedi:complete)
  (global-set-key (kbd "C-c n") 'senator-next-tag)
  (global-set-key (kbd "C-c p") 'senator-previous-tag)
  (global-set-key (kbd "C-D") 'python-docstring)
  (global-set-key (kbd "C-c h p") 'helm-pydoc)
#+END_SRC

#+RESULTS:
: helm-pydoc
   
* lua/awesome
  These are the customizations for lua. Especially for development of awesome

** TODO Tests
* TODO Java
  https://github.com/jdee-emacs/jdee
* Navigation
** avy (jump to x)

   avy lets you jump directrly to one or a combination of 2 characters or to a line
   Intialize avy
   https://github.com/abo-abo/avy

#+BEGIN_SRC emacs-lisp
  (avy-setup-default)
  (global-set-key (kbd "C-:") 'avy-goto-char)
  (global-set-key (kbd "C-'") 'avy-goto-char-2)
  (global-set-key (kbd "M-g f") 'avy-goto-line)
#+END_SRC

#+RESULTS:
: avy-goto-line

** sr-speedbar

   Speedbar is a tool that creates a window and shows speedbar inside
   Initialize sr-speedbar

#+BEGIN_SRC emacs-lisp
(require 'sr-speedbar)
#+END_SRC

** Navigation keymaps
   
   Some global keymaps
   
   | Key       | Command         | Explanation                            |
   |-----------+-----------------+----------------------------------------|
   | bookmarks |                 |                                        |
   | C-x r m   |                 | Set bookmark                           |
   | C-x r b   |                 | Go to a bookmark                       |
   | C-x r l   |                 | List all bookmarks                     |
   |           |                 |                                        |
   | C-u C-SPC |                 | Go back to last point                  |
   | M-g M-g   | goto-line       |                                        |
   |           |                 |                                        |
   | C-M-a     |                 | Move to beginning of function          |
   | C-M-e     |                 | Move to end of function                |
   | C-M-h     |                 | Select the current function            |
   |           |                 |                                        |
   | Jump      |                 |                                        |
   | C-:       | avy-goto-char   |                                        |
   | C-'       | avy-goto-char-2 | same as avy-goto-char but with 2 chars |
   | M-g f     | avy-goto-line   |                                        |

   
   
*** TODO Remove conflict with rope functions

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c f") 'iy-go-to-char)
(global-set-key (kbd "C-c F") 'iy-go-to-char-backward)
(global-set-key (kbd "C-c ;") 'iy-go-to-or-up-to-continue)
(global-set-key (kbd "C-c ,") 'iy-go-to-or-up-to-continue-backward)
#+END_SRC

   Usefull keys

   | Key     | Function      |
   |---------+---------------|
   | C-s C-w | Find at point |
   |         |               |
   |         |               |
   |         |               |
   
* Blogging/writing
** olivetti mode
   on [[https://github.com/rnkn/olivetti][github]]
   
* Text  Editing
** autocomplete
   
   autocomplete in drop down menus (inline)
*** TODO Is this realy needed?

#+BEGIN_SRC emacs-lisp
(require 'auto-complete-config)
(add-to-list 'ac-dictionary-directories "~/.emacs.d/ac-dict")
(ac-config-default)
#+END_SRC

** undo

   An advanced undo system

#+BEGIN_SRC emacs-lisp
(global-undo-tree-mode t)
(setq undo-tree-visualizer-relative-timestamps t)
(setq undo-tree-visualizer-timestamps t)
#+END_SRC
** parenthesis
   
   Automagically pair braces and quotes like TextMate

#+BEGIN_SRC emacs-lisp
  (electric-pair-mode)
#+END_SRC

   Show matching parentheses

#+BEGIN_SRC emacs-lisp
(setq show-paren-mode t)
#+END_SRC

   I don't want numerous colors for every parenthesis.
   I only want to see the non matching parenthesis
   
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
  (require 'rainbow-delimiters)
  (setq rainbow-delimiters-max-face-count 1)
  (set-face-attribute 'rainbow-delimiters-unmatched-face nil
                      :foreground 'unspecified
                      :inherit 'error)
#+END_SRC

#+RESULTS:

Move by parenthesis as per http://ergoemacs.org/emacs/emacs_navigating_keys_for_brackets.html

#+BEGIN_SRC emacs-lisp
  (load "~/.emacs.d/custom/brackets-movement.el")

  (global-set-key (kbd "C-(") 'xah-backward-left-bracket)
  (global-set-key (kbd "C-)") 'xah-forward-right-bracket)
#+END_SRC

#+RESULTS:
: xah-forward-right-bracket

** Multiple cursors

   Mutliple cursors does what it says

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
#+END_SRC

** Selection

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-=") 'er/expand-region)
#+END_SRC

** Copy paste
   Custom el to change behavior of std copy/cut paste behavior
   Some code based on xah-lee's version on http://ergoemacs.org/emacs/emacs_copy_cut_current_line.html

#+BEGIN_SRC emacs-lisp
(load "~/.emacs.d/custom/copy-paste-behavior.el")

(global-set-key (kbd "C-w") 'custom-cut-line-or-region) ; cut
(global-set-key (kbd "M-w") 'custom-copy-line-or-region) ; copy
#+END_SRC

#+RESULTS:
: xah-copy-line-or-region

** Indentation
   
   | Key              | Function                                          |
   |------------------+---------------------------------------------------|
   | M-x align-regexp | Make alignments e.g. [:space] to aligin on spaces |
   |                  |                                                   |
   |                  |                                                   |
   |                  |                                                   |
   
** YaSnippet

Enable yasnippet on startup for all mode
#+BEGIN_SRC emacs-lisp
  (yas-global-mode 1)
#+END_SRC

| key   | command        | explanation         |
|-------+----------------+---------------------|
|       | yas-reload-all | Reload snippets     |
| <TAB> | yas-expand     | expand abbreviation |
|       |                |                     |

** Spelling/autocorrect//
   
   For enabling spelling for a specific mode this is needed
   (add-hook 'text-mode-hook 'flyspell-mode)

   #+BEGIN_SRC shell
   sudo pacman -S aspell-en
   #+END_SRC
   
   | Key   | Command       | Explanation               |
   |-------+---------------+---------------------------|
   |       | ispell-buffer | spell check entire buffer |
   | M-$   |               | spell check word at point |
   | C-c c |               | autocorrect               |

*** Typo correctors
    
    Enable auto correction for dubble typed CApitals
    Found on stack exchange ...
    #+BEGIN_SRC emacs-lisp
      (load "~/.emacs.d/custom/typo-correct.el")
      (dubcaps-mode)
    #+END_SRC

    #+RESULTS:
    : t

    Enable autocorrect with suggestions to correct instea of retyping
    Found at: http://endlessparentheses.com/ispell-and-abbrev-the-perfect-auto-correct.html
    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "C-c c") 'endless/ispell-word-then-abbrev)
    #+END_SRC

    #+RESULTS:
    : endless/ispell-word-then-abbrev

** Replace

   #+BEGIN_SRC emacs-lisp
     (global-anzu-mode)
     (global-set-key (kbd "M-%") 'anzu-query-replace)
     (global-set-key (kbd "C-M-%") 'anzu-query-replace-regexp)
   #+END_SRC

   #+RESULTS:
   : anzu-query-replace-regexp

   | Key              | Command | Explanation                    |
   |------------------+---------+--------------------------------|
   | Search & Replace |         |                                |
   | M-%              |         | Replace from cursor            |
   | C-M-%            |         | Replace from cursro with regex |

*** TODO Replace should always start at the beginning of the buffer
    
** Shortcuts

   | Key     | Command         | Explanation                         |
   |---------+-----------------+-------------------------------------|
   | M-\     |                 | Delete all whitespace on line       |
   | M-SPC   |                 | Delete all but 1 whitespace on line |
   |         | untabify        | Convert tabs to spaces              |
   | C-t     | transpose-chars | transpose characters                |
   | M-t     | transpose-words |                                     |
   | C-M-t   | transpose-sexp  |                                     |
   | C-x C-t | transpose-lines |                                     |

* Code
** Comments
   
   | Key | Command     | Explanation                                       |
   |-----+-------------+---------------------------------------------------|
   |     | comment-box | Create a comment box instead of simply commenting |
   |     |             |                                                   |
   |     |             |                                                   |
   

*** TODO change comment uncomment behavior
    when no region act on current line
    region should virtually expand to the beginning of the first line, so it doesn't cut lines in half

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-;") 'comment-or-uncomment-region)
#+END_SRC

** elisp
   autocompletion with litable
   [[https://github.com/Fuco1/litable][github page]]
* Projects
  Projectile is the project mgmt tool

**  helm-projectile
    [[http://tuhdo.github.io/helm-projectile.html][helm projectile]]

    key bindingd
    #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-c r h") 'helm-projectile)
    #+END_SRC

    #+RESULTS:
    : helm-projectile

    | key     | command         | explantion             |
    |---------+-----------------+------------------------|
    | C-c r h | helm-projectile | fhind projectile files |
    |         |                 |                        |
    |         |                 |                        |
        
* Eshell
  enable helm autocompletion

  #+BEGIN_SRC emacs-lisp
    (add-hook 'eshell-mode-hook
              '(lambda ()
                 (define-key eshell-mode-map (kbd "C-c C-l")  'helm-eshell-history)))
  #+END_SRC

  #+RESULTS:
  | lambda | nil | (define-key eshell-mode-map (kbd C-c C-l) (quote helm-eshell-history)) |

* Spreadsheet
  *.ses file
  [[https://www.gnu.org/software/emacs/manual/html_mono/ses.html#Quick-Tutorial][SES documentation]]
* Evernote
* Dired

  Commands
  
  | Key         | Command | Explanation                      |
  |-------------+---------+----------------------------------|
  | m           |         | mark marked/current              |
  | u           |         | unmark marked/current            |
  | C           |         | Copy marked/current              |
  | R           |         | Rename/Move marked/current       |
  | D           |         | Delete marked/current            |
  | Q           |         | Query replace in marked/current  |
  | % m <regex> |         | Mark any file matching the regex |
  | * t         |         | Invert mark                      |
  | * s         |         | Mark all                         |
  |             |         |                                  |
  | a           |         | Open in current buffer           |
  |             |         |                                  |
  | C-x C-q     |         | Dired edit mode                  |
  | C-c C-c     |         | Save changes                     |
  | C-c C-k     |         | Cancel changes                   |
  
* Emacs general
** Help
| Key   | Command           | Explanation                  |
|-------+-------------------+------------------------------|
| C-h f | describe-function | Show emacs doc               |
| C-h b | describe-bidings  | show all bindings            |
| C-h k | describe-key      | Show command behind key      |
| C-h v | describe-variable | Show the value of a variable |
|       |                   |                              |

** Shell commands

   | Key | Command                 | Explanation |
   |-----+-------------------------+-------------|
   | M-! | shell-command           |             |
   | M-  | shell-command-on-region |             |
   |     |                         |             |
   
** Files

   When open files remain on exiting, pressing 'd' will show the diff
** Windowing
   
   | Key   | Command         | Explanation |
   |-------+-----------------+-------------|
   | C-x + | balance-windows |             |
   |       |                 |             |
   |       |                 |             |
   |       |                 |             |
   
** Characters and unicode

 | Key       | Command | Explanation                                                                      |
 |-----------+---------+----------------------------------------------------------------------------------|
 | C-c C-x \ |         | Show entities as UTF 8 and also convert other conventions to nice looking things |
 |           |         |                                                                                  |
 | x_{B}     |         | Sub script                                                                       |
 | x^{B}     |         | SupperScript                                                                     |
 |           |         |                                                                                  |
 | S-SPACE   |         | Expand math symbols ([[http://ergoemacs.org/emacs/xmsi-math-symbols-input.html][xah-math-input]]) xah-math-input-mode                         |
 |           |         |                                                                                  |

