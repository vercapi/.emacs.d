#+TITLE: Emacs Configuration

* Packages setup
  
  Loading all the resources so the rest of the config has access to all these resoruces.

** Packages sources

   Configure all sources for packages to be used throughtout this config file.
   #+BEGIN_SRC emacs-lisp
    (setq package-archives '(("melpa" . "http://melpa.milkbox.net/packages/")
                             ("marmalade" . "http://marmalade-repo.org/packages/")
                             ("gnu" . "http://elpa.gnu.org/packages/")))
   #+END_SRC


** use-package & quelpa bootstrap

   These are the packages needed to manage the packages from the package repostiories or directly from git.

   Ensure that 'use-package' is installed.
   #+BEGIN_SRC emacs-lisp
   (if (not (package-installed-p 'use-package))
   (progn
       (package-refresh-contents)
       (package-install 'use-package)))
 
    (require 'use-package)
   #+END_SRC

   Ensure that 'quelpa' is installed, a dependency for quelpa-use-package the package we really want
   Allows to Emacs Lisp packages built directly from source
   #+BEGIN_SRC emacs-lisp
     (use-package quelpa
       :ensure t)
   #+END_SRC

   #+RESULTS:
   : quelpa

   Further install quelpa-use-package
   This is the quelpa handle for use-package
   #+BEGIN_SRC emacs-lisp
     (use-package quelpa-use-package
       :ensure t
       :after quelpa)
   #+END_SRC

   #+RESULTS:
   : quelpa-use-package
   

** Iinitialize packages
  
   load all packages that are installed. 
   #+BEGIN_SRC emacs-lisp
   ;; activate all the packages (in particular autoloads)
   (package-initialize)
   #+END_SRC
   

** Load custom local code

   All custom tooling that is available within this repository.
   #+BEGIN_SRC emacs-lisp
   (add-to-list 'load-path "~/.emacs.d/custom/")
   #+END_SRC

   #+RESULTS:
   | ~/.emacs.d/custom/ | /home/vercapi/.emacs.d/elpa/powerline-20180321.1948 | /home/vercapi/.emacs.d/elpa/use-package-20180613.2219 | /home/vercapi/.emacs.d/elpa/bind-key-20180512.2130 | /usr/share/emacs/26.1/site-lisp | /usr/share/emacs/site-lisp | /usr/share/emacs/26.1/lisp | /usr/share/emacs/26.1/lisp/vc | /usr/share/emacs/26.1/lisp/url | /usr/share/emacs/26.1/lisp/textmodes | /usr/share/emacs/26.1/lisp/progmodes | /usr/share/emacs/26.1/lisp/play | /usr/share/emacs/26.1/lisp/org | /usr/share/emacs/26.1/lisp/nxml | /usr/share/emacs/26.1/lisp/net | /usr/share/emacs/26.1/lisp/mh-e | /usr/share/emacs/26.1/lisp/mail | /usr/share/emacs/26.1/lisp/leim | /usr/share/emacs/26.1/lisp/language | /usr/share/emacs/26.1/lisp/international | /usr/share/emacs/26.1/lisp/image | /usr/share/emacs/26.1/lisp/gnus | /usr/share/emacs/26.1/lisp/eshell | /usr/share/emacs/26.1/lisp/erc | /usr/share/emacs/26.1/lisp/emulation | /usr/share/emacs/26.1/lisp/emacs-lisp | /usr/share/emacs/26.1/lisp/cedet | /usr/share/emacs/26.1/lisp/calendar | /usr/share/emacs/26.1/lisp/calc | /usr/share/emacs/26.1/lisp/obsolete |

* Environment
  
  Check where we are running
  #+BEGIN_SRC emacs-lisp
    (defun pve-env/on-cygwin ()
      "Return true if we are on cygwin"
      (string-equal system-type "cygwin"))

  #+END_SRC

  #+RESULTS:
  : pve-env/on-cygwin

* UI Configuration
** Emacs frame appearance

   #+BEGIN_SRC emacs-lisp
     (tool-bar-mode -1) ;; no toolbar
     (menu-bar-mode -1) ;; no menubar
     (toggle-scroll-bar -1) ;; no scrollbar
     (fset 'yes-or-no-p 'y-or-n-p) ;; type y/n not yes/no
   #+END_SRC

   #+RESULTS:
   : y-or-n-p

** mode line

*** Standard configuration of the mode line
    
    Set the file size on the mode line  
    #+BEGIN_SRC emacs-lisp
    (setq size-indication-mode t)
    #+END_SRC

    #+RESULTS:
    : t

    Add columns to the mode line
    #+BEGIN_SRC emacs-lisp
    (setq column-number-mode t)
    #+END_SRC

    #+RESULTS:
    : t

*** Powerline

    Activate powerline with the default theme

     You need to use patched fonts -> 
     git clone https://github.com/powerline/fonts

     #+BEGIN_SRC emacs-lisp
       (use-package powerline
	   :ensure t
	   :config
	   (powerline-default-theme)
	   (setq powerline-default-separator 'slant
		 solarized-high-contrast-mode-line t)
       )
     #+END_SRC

     #+RESULTS:
     : t

** Fonts

   Set the standard fonts for emacs and other componets
   This is based on std configuration. So if emacs adds this again in init.el or .emacs things might break and this needs to be update manually

   #+BEGIN_SRC emacs-lisp
     (custom-set-faces
      '(default ((t (:family "DejaVu Sans Mono for Powerline" :foundry "unknown" :slant normal :weight normal :height 140 :width normal))))
      '(minimap-font-face ((t (:height 40 :family "DejaVu Sans Mono"))))
      '(mode-line ((t (:family "DejaVu Sans Mono for Powerline" :foundry "unknown" :slant normal :weight normal :height 140 :width normal)))))
    #+END_SRC

    #+RESULTS:

    Simple shortcuts to switch between to common used font sizes
    #+BEGIN_SRC emacs-lisp
      (defun pve-small-fonts ()
	"Set font to work on desktop screens."
	(interactive)
	(pve-set-fonts 100)
	)

      (defun pve-big-fonts ()
	"Set font for use on laptop screens."
	(interactive)
	(pve-set-fonts 140)
	)

      (defun pve-set-fonts (font-height)
	"Set size of fonts to FONT-HEIGHT, and only the size of the fonts."
	(set-face-attribute 'default nil :height font-height)
	(set-face-attribute 'mode-line nil :height font-height)
	)
    #+END_SRC
    
** Theme
   
   Using solarized theme as base theme
   #+BEGIN_SRC emacs-lisp
     (use-package solarized-theme
       :ensure t
       :config (load-theme 'solarized-dark t))
   #+END_SRC

   #+RESULTS:
   : t
   
** Buffer

   Turn on line mode
   #+BEGIN_SRC emacs-lisp
     (add-hook 'prog-mode-hook #'display-line-numbers-mode)
   #+END_SRC

   #+RESULTS:
   | display-line-numbers-mode |

* Emacs Behavior
** General behavior 

   Turn of the bell alarm
   #+BEGIN_SRC emacs-lisp
   (setq ring-bell-function 'ignore)
   #+END_SRC

   Start the server
   #+BEGIN_SRC emacs-lisp
   (server-start)
   #+END_SRC

   No splash screen
   #+BEGIN_SRC emacs-lisp
   (setq inhibit-splash-screen t)
   #+END_SRC

   Set all encodings etc. to utf-8
   #+BEGIN_SRC emacs-lisp
   (set-language-environment 'utf-8)
   (set-terminal-coding-system 'utf-8)
   (setq locale-coding-system 'utf-8)
   (set-default-coding-systems 'utf-8)
   (set-selection-coding-system 'utf-8)
   (prefer-coding-system 'utf-8)
   #+END_SRC

   Show completion of keybindings
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :ensure t
       :config (progn
		 (which-key-mode)
		 (which-key-setup-minibuffer)))
   #+END_SRC

** Working with files  
   
   Backups of files
   #+BEGIN_SRC emacs-lisp
   (setq backup-directory-alist '(("." . "~/.saves")))
   #+END_SRC
   
** Window behavior

   Winner mode to undo and redo window configuration
   #+BEGIN_SRC emacs-lisp
     (winner-mode 1)
   #+END_SRC

   #+RESULTS:
   : t

   Set S-<arrows> to move around the windows (S- <arrow> to move along windows)
   And also ensure this works in org mode. See org-mode [[https://orgmode.org/manual/Conflicts.html][manual]] on 'Conflicts'
   #+BEGIN_SRC emacs-lisp
     (windmove-default-keybindings)

     (setq org-replace-disputed-keys t)
     (add-hook 'org-shiftup-final-hook 'windmove-up)
     (add-hook 'org-shiftleft-final-hook 'windmove-left)
     (add-hook 'org-shiftdown-final-hook 'windmove-down)
     (add-hook 'org-shiftright-final-hook 'windmove-right)
   #+END_SRC

   #+RESULTS:
   | windmove-right |
** Logins
   
   Set the time emacs caches a password in seconds, tramp, sudo, ...?
   #+BEGIN_SRC emacs-lisp
     (setq password-cache t
	   password-cache-expiry 1200)
   #+END_SRC

   Ensure that emacs is actually using the eshell/sudo so that the cache above works
   #+BEGIN_SRC emacs-lisp
     (require 'em-tramp)
     (add-hook 'eshell-mode-hook
	       (lambda ()
		 (eshell/alias "sudo" "eshell/sudo $*")))
   #+END_SRC

** Navigation
*** Cursor position
    
    Flash cursor whenever it jumps to another possition by any command
    #+BEGIN_SRC emacs-lisp
      (use-package beacon
	:ensure t
	:config (beacon-mode 1))
    #+END_SRC
** Search  

   Helm swoop, a more dynamic version of hem-occur
   Find all occurences in a/multiple file(s) follow along in the files while browsing the results.
   #+BEGIN_SRC emacs-lisp
     (use-package helm-swoop
       :ensure t
       :bind (("M-i" . helm-swoop)
	      ("M-I" . helm-swoop-back-to-last-point)
	      ("C-c M-i" . helm-multi-swoop)
	      ("C-x M-i" . helm-multi-swoop-all)))
   #+END_SRC

** Selection
   
   Expande selection by semantic units
   #+BEGIN_SRC emacs-lisp
     (use-package expand-region
       :ensure t
       :bind ("C-=" . er/expand-region))
   #+END_SRC

   #+RESULTS:
   : er/expand-region
   
** Autocomplete

   Company (complete anything) is the front end system to autocomplete. Has mutliple backends that can provide autocompletion
   #+BEGIN_SRC emacs-lisp
     (use-package company
       :ensure t
       :hook (after-init . global-company-mode)
       :bind ("C-<tab>" . company-complete))
   #+END_SRC
   
** Syntax checking
   
   Using flycheck as the syntax checker
   #+BEGIN_SRC emacs-lisp
     (use-package flycheck
       :ensure t
       :init (global-flycheck-mode))
   #+END_SRC
* Source control

  Setting up the function to initialize the message-history and magit integration.
  #+BEGIN_SRC emacs-lisp
    (defun init-message-history-magit ()
	(progn
	  (defun message-add-magit ()
	    "This is a helper method that already provides a file"
	    (message-history/add message-history/message-history-file))
	  (defun message-commit-setup-magit ()
	    "This method needs to called for setting up the git-commit-mode hook it will set up a hook only when the magit commit buffer is activated"
	    (add-hook 'before-save-hook 'message-add-magit nil t))))
  #+END_SRC

  Using magit for soruce control
  #+BEGIN_SRC emacs-lisp
    (use-package magit
      :ensure t
      :bind ("C-x t" . magit-status)
      :hook ((git-commit-mode . message-commit-setup-magit)
	     (magit-mode . turn-on-magit-gitflow))
      :after (message-history magit-gitflow)
      :init (init-message-history-magit))
  #+END_SRC

  Add git flow extension to magit. This enables feature branches etc.
  #+BEGIN_SRC emacs-lisp
    (use-package magit-gitflow
      :ensure t)
  #+END_SRC
  
* Project management
  
  The base of projectmanangement is projectile
  #+BEGIN_SRC emacs-lisp
    (use-package projectile
      :ensure t)
  #+END_SRC
  
* Programming languages
** restclient

   Do restcalls from witin an emacs buffer

   Install restclient
   #+BEGIN_SRC emacs-lisp
     (use-package restclient
       :ensure t
       :mode "\\.http\\'")
   #+END_SRC
** javascript

   Javascript mode
   #+BEGIN_SRC emacs-lisp
     (use-package js2-mode
       :mode "\\.js\\'"
       :ensure t)
   #+END_SRC

* Utils
** Helm

  #+BEGIN_SRC emacs-lisp
    (use-package helm
      :ensure t
      :config
      (setq helm-split-window-in-side-p               t ; open helm buffer inside current window, not occupy whole other window
		helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
		helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
		helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
		helm-ff-file-name-history-use-recentf t)
      :bind (("M-x" . helm-M-x)
	     ("C-x b" . helm-mini)
	     ("C-x C-f" . helm-find-files)
	     ("C-c h o" . helm-occur)
	     ("M-y" . helm-show-kill-ring)
	     :map helm-map
	     ("<tab>" . helm-execute-persistent-action)
	     ("C-z" . helm-select-action)))
  #+END_SRC

** Hydra
   
   Navigation with keys
   #+BEGIN_SRC emacs-lisp
     (use-package hydra
       :ensure t)
   #+END_SRC

   #+RESULTS:

** Eshell

   Set paths depending on the environment we are running
   #+BEGIN_SRC emacs-lisp
     (defun pve-set-eshell-path-env ()
       "Settig the eshell-path-env"
       (if (pve-env/on-cygwin)
	   (progn
	     (setq cygwin-paths "/cygdrive/c/Program Files/nodejs/:")
	     (setq eshell-path-env (concat cygwin-paths eshell-path-env))
	     (setenv "PATH" (concat cygwin-paths (getenv "PATH"))))))
   #+END_SRC

   #+RESULTS:
   : pve-set-eshell-path-env

   Add hook to eshell to set paths when eshell starts
   #+BEGIN_SRC emacs-lisp
     (add-hook 'eshell-mode-hook 'pve-set-eshell-path-env)
   #+END_SRC

* Org Mode

  Hydra for setting up navigation between headers
  and for setting up bookmarkds
  #+BEGIN_SRC emacs-lisp
    (defun pve-org-nav-hydra ()
      (require 'hydra)
      (defhydra hydra-org-navigation (org-mode-map "<f2>")
	"Org navigation"
	("n" outline-next-visible-heading)
	("p" outline-previous-visible-heading)
	("f" org-forward-heading-same-level)
	("b" org-backward-heading-same-level)
	("a" helm-org-in-buffer-headings)
	("u" outline-up-heading))
      (local-set-key (kbd "<f7>") 'org-mark-ring-push)
      (local-set-key (kbd "C-<f7>") 'org-mark-ring-goto))
  #+END_SRC

  
  #+BEGIN_SRC emacs-lisp
    (defun pve-enable-org-bullets ()
      (org-bullets-mode 1))
  #+END_SRC

  Actually configure org mode
  #+BEGIN_SRC emacs-lisp
    (use-package org-mode
      :init
      (setq org-confirm-babel-evaluate nil) ;;No need to confirm executing babel code blocks
      (require 'ob-async)
      :hook
      ((org-mode . pve-org-nav-hydra)
       (org-mode . pve-enable-org-bullets))
      :after (hydra org-bullets ob-async))
  #+END_SRC

  Show bullets as images not just '*'s
  #+BEGIN_SRC emacs-lisp
    (use-package org-bullets
      :ensure t)
  #+END_SRC

  This package enables asynchronous org babel evaluation
  #+BEGIN_SRC emacs-lisp
    (use-package ob-async
      :ensure t)
  #+END_SRC
* Application Integration
** Twitter
   
   #+BEGIN_SRC emacs-lisp
     (use-package twittering-mode
       :ensure t)
   #+END_SRC

   #+RESULTS:
   
* Libraries
  
  #+BEGIN_SRC emacs-lisp
    (use-package message-history)
  #+END_SRC
