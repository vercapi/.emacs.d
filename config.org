#+TITLE: Emacs Configuration

An elegant editor... for a more civilized age.

* Packages setup
  
  Loading all the resources so the rest of the config has access to all these resoruces.

** Packages sources

   Configure all sources for packages to be used throughtout this config file.
   #+BEGIN_SRC emacs-lisp
    (setq package-archives '(("melpa" . "http://melpa.milkbox.net/packages/")
                             ("marmalade" . "http://marmalade-repo.org/packages/")
                             ("gnu" . "http://elpa.gnu.org/packages/")))
   #+END_SRC


** use-package & quelpa bootstrap

   These are the packages needed to manage the packages from the package repostiories or directly from git.

   Ensure that 'use-package' is installed.
   #+BEGIN_SRC emacs-lisp
   (if (not (package-installed-p 'use-package))
   (progn
       (package-refresh-contents)
       (package-install 'use-package)))
 
    (require 'use-package)
   #+END_SRC

   Ensure that 'quelpa' is installed, a dependency for quelpa-use-package the package we really want
   Allows to Emacs Lisp packages built directly from source
   #+BEGIN_SRC emacs-lisp
     (use-package quelpa
       :ensure t)
   #+END_SRC

   #+RESULTS:
   : quelpa

   Further install quelpa-use-package
   This is the quelpa handle for use-package
   #+BEGIN_SRC emacs-lisp
     (use-package quelpa-use-package
       :ensure t
       :after quelpa)
   #+END_SRC

   #+RESULTS:
   : quelpa-use-package
   

** Iinitialize packages
  
   load all packages that are installed. 
   #+BEGIN_SRC emacs-lisp
   ;; activate all the packages (in particular autoloads)
   (package-initialize)
   #+END_SRC
   

** Load custom local code

   All custom tooling that is available within this repository.
   #+BEGIN_SRC emacs-lisp
   (add-to-list 'load-path "~/.emacs.d/custom/")
   #+END_SRC

   #+RESULTS:
   | ~/.emacs.d/custom/ | /home/vercapi/.emacs.d/elpa/powerline-20180321.1948 | /home/vercapi/.emacs.d/elpa/use-package-20180613.2219 | /home/vercapi/.emacs.d/elpa/bind-key-20180512.2130 | /usr/share/emacs/26.1/site-lisp | /usr/share/emacs/site-lisp | /usr/share/emacs/26.1/lisp | /usr/share/emacs/26.1/lisp/vc | /usr/share/emacs/26.1/lisp/url | /usr/share/emacs/26.1/lisp/textmodes | /usr/share/emacs/26.1/lisp/progmodes | /usr/share/emacs/26.1/lisp/play | /usr/share/emacs/26.1/lisp/org | /usr/share/emacs/26.1/lisp/nxml | /usr/share/emacs/26.1/lisp/net | /usr/share/emacs/26.1/lisp/mh-e | /usr/share/emacs/26.1/lisp/mail | /usr/share/emacs/26.1/lisp/leim | /usr/share/emacs/26.1/lisp/language | /usr/share/emacs/26.1/lisp/international | /usr/share/emacs/26.1/lisp/image | /usr/share/emacs/26.1/lisp/gnus | /usr/share/emacs/26.1/lisp/eshell | /usr/share/emacs/26.1/lisp/erc | /usr/share/emacs/26.1/lisp/emulation | /usr/share/emacs/26.1/lisp/emacs-lisp | /usr/share/emacs/26.1/lisp/cedet | /usr/share/emacs/26.1/lisp/calendar | /usr/share/emacs/26.1/lisp/calc | /usr/share/emacs/26.1/lisp/obsolete |

* Environment
  
  Check where we are running
  #+BEGIN_SRC emacs-lisp
    (defun pve-env/on-cygwin ()
      "Return true if we are on cygwin"
      (string-equal system-type "cygwin"))

  #+END_SRC

  #+RESULTS:
  : pve-env/on-cygwin

* UI Configuration
** Emacs frame appearance

   #+BEGIN_SRC emacs-lisp
     (tool-bar-mode -1) ;; no toolbar
     (menu-bar-mode -1) ;; no menubar
     (toggle-scroll-bar -1) ;; no scrollbar
     (fset 'yes-or-no-p 'y-or-n-p) ;; type y/n not yes/no
   #+END_SRC

   #+RESULTS:
   : y-or-n-p

** mode line

*** Standard configuration of the mode line
    
    Set the file size on the mode line  
    #+BEGIN_SRC emacs-lisp
    (setq size-indication-mode t)
    #+END_SRC

    #+RESULTS:
    : t

    Add columns to the mode line
    #+BEGIN_SRC emacs-lisp
    (setq column-number-mode t)
    #+END_SRC

    #+RESULTS:
    : t

*** Powerline

    Activate powerline with the default theme

     You need to use patched fonts -> 
     git clone https://github.com/powerline/fonts

     #+BEGIN_SRC emacs-lisp
       (use-package powerline
	   :ensure t
	   :config
	   (powerline-default-theme)
	   (setq powerline-default-separator 'slant
		 solarized-high-contrast-mode-line t)
       )
     #+END_SRC

     #+RESULTS:
     : t

** Fonts

   Set the standard fonts for emacs and other componets
   This is based on std configuration. So if emacs adds this again in init.el or .emacs things might break and this needs to be update manually

   #+BEGIN_SRC emacs-lisp
     (custom-set-faces
      '(default ((t (:family "DejaVu Sans Mono for Powerline" :foundry "unknown" :slant normal :weight normal :height 140 :width normal))))
      '(minimap-font-face ((t (:height 40 :family "DejaVu Sans Mono"))))
      '(mode-line ((t (:family "DejaVu Sans Mono for Powerline" :foundry "unknown" :slant normal :weight normal :height 140 :width normal)))))
    #+END_SRC

    #+RESULTS:

    Simple shortcuts to switch between to common used font sizes
    #+BEGIN_SRC emacs-lisp
      (defun pve-small-fonts ()
	"Set font to work on desktop screens."
	(interactive)
	(pve-set-fonts 100)
	)

      (defun pve-big-fonts ()
	"Set font for use on laptop screens."
	(interactive)
	(pve-set-fonts 140)
	)

      (defun pve-set-fonts (font-height)
	"Set size of fonts to FONT-HEIGHT, and only the size of the fonts."
	(set-face-attribute 'default nil :height font-height)
	(set-face-attribute 'mode-line nil :height font-height)
	)
    #+END_SRC
    
** Theme/Syntax sugar
   
   Using solarized theme as base theme
   #+BEGIN_SRC emacs-lisp
     (use-package solarized-theme
       :ensure t
       :config (load-theme 'solarized-dark t))
   #+END_SRC

   Colorize delimters (,[,... different colors for every level
   #+BEGIN_SRC emacs-lisp
     (use-package rainbow-delimiters
       :ensure t
       :hook (prog-mode . rainbow-delimiters-mode))
   #+END_SRC

   Highlight the other parentheses
   #+BEGIN_SRC emacs-lisp
     (add-hook 'prog-mode-hook (lambda () (show-paren-mode 1)))
   #+END_SRC

*** Pretiify Symbols

   Change some code in more elegant symbols, per programming language

   Configuration for lisp
   #+BEGIN_SRC emacs-lisp
     (add-hook 'emacs-lisp-mode-hook
	       (lambda ()
		 (push '("lambda" . ?Î») prettify-symbols-alist)))
     (add-hook 'emacs-lisp-mode 'prettify-symbols-mode)
   #+END_SRC
   
** Buffer

   Turn on line mode
   #+BEGIN_SRC emacs-lisp
     (add-hook 'prog-mode-hook #'display-line-numbers-mode)
   #+END_SRC

   #+RESULTS:
   | display-line-numbers-mode |

* Emacs Behavior
** General behavior 

   Turn of the bell alarm
   #+BEGIN_SRC emacs-lisp
   (setq ring-bell-function 'ignore)
   #+END_SRC

   Start the server
   #+BEGIN_SRC emacs-lisp
   (server-start)
   #+END_SRC

   No splash screen
   #+BEGIN_SRC emacs-lisp
   (setq inhibit-splash-screen t)
   #+END_SRC

   Set all encodings etc. to utf-8
   #+BEGIN_SRC emacs-lisp
   (set-language-environment 'utf-8)
   (set-terminal-coding-system 'utf-8)
   (setq locale-coding-system 'utf-8)
   (set-default-coding-systems 'utf-8)
   (set-selection-coding-system 'utf-8)
   (prefer-coding-system 'utf-8)
   #+END_SRC

   Show completion of keybindings
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :ensure t
       :config (progn
		 (which-key-mode)
		 (which-key-setup-minibuffer)))
   #+END_SRC

** Working with files  
   
   Backups of files
   #+BEGIN_SRC emacs-lisp
     (setq backup-directory-alist '(("." . "~/.saves")))
   #+END_SRC

   Disable lock files
   #+BEGIN_SRC emacs-lisp
     (setq create-lockfiles nil)
   #+END_SRC
   
** Window behavior

   Winner mode to undo and redo window configuration
   #+BEGIN_SRC emacs-lisp
     (winner-mode 1)
   #+END_SRC

   #+RESULTS:
   : t

   Set S-<arrows> to move around the windows (S- <arrow> to move along windows)
   And also ensure this works in org mode. See org-mode [[https://orgmode.org/manual/Conflicts.html][manual]] on 'Conflicts'
   #+BEGIN_SRC emacs-lisp
     (windmove-default-keybindings)

     (setq org-replace-disputed-keys t)
     (add-hook 'org-shiftup-final-hook 'windmove-up)
     (add-hook 'org-shiftleft-final-hook 'windmove-left)
     (add-hook 'org-shiftdown-final-hook 'windmove-down)
     (add-hook 'org-shiftright-final-hook 'windmove-right)
   #+END_SRC
   
   Eybrowse allows a virutal desktop like solution to be used within emacs.
   #+BEGIN_SRC emacs-lisp
     (use-package eyebrowse
       :ensure t
       :init (eyebrowse-mode t))
   #+END_SRC

** Logins
   
   Set the time emacs caches a password in seconds, tramp, sudo, ...?
   #+BEGIN_SRC emacs-lisp
     (setq password-cache t
	   password-cache-expiry 1200)
   #+END_SRC

   Ensure that emacs is actually using the eshell/sudo so that the cache above works
   #+BEGIN_SRC emacs-lisp
     (require 'em-tramp)
     (add-hook 'eshell-mode-hook
	       (lambda ()
		 (eshell/alias "sudo" "eshell/sudo $*")))
   #+END_SRC

** Cursor Navigation
    
    Flash cursor whenever it jumps to another possition by any command
    #+BEGIN_SRC emacs-lisp
      (use-package beacon
	:ensure t
	:config (beacon-mode 1))
    #+END_SRC

    Highlight the current line
    #+BEGIN_SRC emacs-lisp
      (global-hl-line-mode)
    #+END_SRC
    
** Search & Replace 

   Helm swoop, a more dynamic version of hem-occur
   Find all occurences in a/multiple file(s) follow along in the files while browsing the results.
   #+BEGIN_SRC emacs-lisp
     (use-package helm-swoop
       :ensure t
       :bind (("M-i" . helm-swoop)
	      ("M-I" . helm-swoop-back-to-last-point)
	      ("C-c M-i" . helm-multi-swoop)
	      ("C-x M-i" . helm-multi-swoop-all)))
   #+END_SRC

   Visual-regexp gives visual feedback on the regexp
   Key combination replace the regular query-regepx-replace
   #+BEGIN_SRC emacs-lisp
     (use-package visual-regexp
       :ensure t
       :bind (
	      ("M-C-%" . vr/query-replace)
	      ("C-c m" . vr/mc-mark)))
   #+END_SRC

** Autocomplete

   Company (complete anything) is the front end system to autocomplete. Has mutliple backends that can provide autocompletion
   #+BEGIN_SRC emacs-lisp
     (use-package company
       :ensure t
       :hook (after-init . global-company-mode)
       :bind ("C-<tab>" . company-complete)
       :init (setq company-minimum-prefix-length 2
		   company-dabbrev-downcase 0
		   company-idle-delay 0))
   #+END_SRC

   LSP backen for company mode
   #+BEGIN_SRC emacs-lisp
     (use-package company-lsp
       :ensure t
       :config (push 'company-lsp company-backends))
   #+END_SRC

   Auto insert the other pair of a bracket
   And the config for elements that are not supported by default
   #+BEGIN_SRC emacs-lisp
     (setq electric-pair-pairs '((?\{ . ?\})))
     (electric-pair-mode 1)
   #+END_SRC

** Syntax checking
   
   Using flycheck as the syntax checker
   #+BEGIN_SRC emacs-lisp
     (use-package flycheck
       :ensure t
       :init (global-flycheck-mode))
   #+END_SRC

** Selection

   Enable multiple cursors.
   #+BEGIN_SRC emacs-lisp
     (use-package multiple-cursors
       :ensure t
       :bind (("C->" . mc/mark-next-like-this)
	      ("C-<" . mc/mark-previous-like-this)
	      ("C-c C-<" . mc/mark-all-like-this)))
   #+END_SRC   
   Visual regepx also has an extansion  to visually add multiple cursors

   Expande selection by semantic units
   #+BEGIN_SRC emacs-lisp
     (use-package expand-region
       :ensure t
       :bind ("C-=" . er/expand-region))
   #+END_SRC
** Undo

   Visual aid to see all undo history in a tree
   #+BEGIN_SRC emacs-lisp
     (use-package undo-tree
       :ensure t
       :bind ("C-x u" . undo-tree-visualize)
       )
   #+END_SRC
* Source control

  Setting up the function to initialize the message-history and magit integration.
  #+BEGIN_SRC emacs-lisp
    (defun init-message-history-magit ()
	(progn
	  (defun message-add-magit ()
	    "This is a helper method that already provides a file"
	    (message-history/add message-history/message-history-file))
	  (defun message-commit-setup-magit ()
	    "This method needs to called for setting up the git-commit-mode hook it will set up a hook only when the magit commit buffer is activated"
	    (add-hook 'before-save-hook 'message-add-magit nil t))))
  #+END_SRC

  Using magit for soruce control
  #+BEGIN_SRC emacs-lisp
    (use-package magit
      :ensure t
      :bind ("C-x t" . magit-status)
      :hook ((git-commit-mode . message-commit-setup-magit)
	     (magit-mode . turn-on-magit-gitflow))
      :after (message-history magit-gitflow)
      :init (init-message-history-magit))
  #+END_SRC

  Add git flow extension to magit. This enables feature branches etc.
  #+BEGIN_SRC emacs-lisp
    (use-package magit-gitflow
      :ensure t)
  #+END_SRC	    
  		    
* Project management
  
  The base of projectmanangement is projectile
  #+BEGIN_SRC emacs-lisp
    (use-package projectile
      :ensure t
      :hook (after-init . projectile-global-mode))
  #+END_SRC	       
  		       
* Programming environments
** restclient

   Do restcalls from witin an emacs buffer

   Install restclient
   #+BEGIN_SRC emacs-lisp
     (use-package restclient
       :ensure t
       :mode "\\.http\\'")
   #+END_SRC

   Setup auto completion for restclient
   #+BEGIN_SRC emacs-lisp
     (use-package company-restclient
       :ensure t
       :config (add-to-list 'company-backends 'company-restclient))
   #+END_SRC

   Add integration into org mode for restclient
   #+BEGIN_SRC emacs-lisp
     (use-package ob-restclient
       :ensure t
       :config (org-babel-do-load-languages
		'org-babel-load-languages
		'((restclient . t))))
   #+END_SRC

** javascript

   Javascript mode
   #+BEGIN_SRC emacs-lisp
     (use-package js2-mode
       :mode "\\.js\\'"
       :ensure t
       :init
       (setq-default js2-basic-offset 2
		     js2-indent-switch-body t
		     js2-auto-indent-p t
		     js2-indent-on-enter-key t))
   #+END_SRC

** python
   
   Install langauge server for python
   #+BEGIN_SRC sh
   pacman -S python-language-server
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (use-package python-mode
       :ensure t
       :mode "\\.py\\'"
       :config
       ;; Create lsp-python-enable to start lsp mode for python
       (lsp-define-stdio-client lsp-python "python"
				 #'projectile-project-root
				 '("pyls"))
       ;; Disable eldoc, we see the info with lsp-ui
       (setq lsp-enable-eldoc nil)
       :hook (python-mode . lsp-python-enable))
   #+END_SRC
     
** Docker

   Manage dockers from within emacs.
   #+BEGIN_SRC emacs-lisp
     (use-package docker
       :ensure t)
   #+END_SRC

   Mode for editing docker files
   #+BEGIN_SRC emacs-lisp
     (use-package dockerfile-mode
       :ensure t)
   #+END_SRC

* File browsing
** Side bar

   For the side bar the package we use treemacs. 
   It feels more like the side bar from vs code and other modern editors.
   
   Install and config the treemacs package.
   #+BEGIN_SRC emacs-lisp
     (use-package treemacs
       :ensure t
       :defer t
       :after (all-the-icons)
       :init
       :config
       (progn
	 ;; Map the icons of all-the-icons on to the icon mappings of treemacs
	 (dolist (item all-the-icons-icon-alist)
	   (let* ((extension (car item))
		  (icon (apply (cdr item))))
	     (ht-set! treemacs-icons-hash 
		      (s-replace-all '(("\\" . "") ("$" . "") ("." . "")) extension)
		      (concat icon " "))))
	 ;; Set the differnt config options
	 (setq treemacs-collapse-dirs              (if (executable-find "python") 3 0)
	       treemacs-file-event-delay           5000
	       treemacs-follow-after-init          t
	       treemacs-follow-recenter-distance   0.1
	       treemacs-goto-tag-strategy          'refetch-index
	       treemacs-indentation                2
	       treemacs-indentation-string         " "
	       treemacs-is-never-other-window      nil
	       treemacs-no-png-images              nil
	       treemacs-project-follow-cleanup     nil
	       treemacs-persist-file               (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
	       treemacs-recenter-after-file-follow nil
	       treemacs-recenter-after-tag-follow  nil
	       treemacs-show-hidden-files          t
	       treemacs-silent-filewatch           nil
	       treemacs-silent-refresh             nil
	       treemacs-sorting                    'alphabetic-desc
	       treemacs-space-between-root-nodes   t
	       treemacs-tag-follow-cleanup         t
	       treemacs-tag-follow-delay           1.5
	       treemacs-width                      35)

	 ;; The default width and height of the icons is 22 pixels. If you are
	 ;; using a Hi-DPI display, uncomment this to double the icon size.
	 ;;(treemacs-resize-icons 44)

	 (treemacs-follow-mode t)
	 (treemacs-filewatch-mode t)
	 (treemacs-fringe-indicator-mode t)
	 (pcase (cons (not (null (executable-find "git")))
		      (not (null (executable-find "python3"))))
	   (`(t . t)
	    (treemacs-git-mode 'extended))
	   (`(t . _)
	    (treemacs-git-mode 'simple))))
       :bind
       (("M-0"       . treemacs-select-window)
	("C-c t 1"   . treemacs-delete-other-windows)
	("C-c t t"   . treemacs)
	("C-c t B"   . treemacs-bookmark)
	("C-c t f" . treemacs-find-file)
	("C-c t t" . treemacs-find-tag)))

     (use-package treemacs-projectile
       :after treemacs projectile
       :ensure t)
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (custom-set-faces
      '(treemacs-directory-face ((t :inherit default)))
      '(treemacs-git-untracked-face ((t :inherit default))))

     (defface pve-treemacs-directory-icon-face
       '((t :inherit treemacs-directory-face :height 1.5))
       "Face used for the folder icons, to make them bigger compared to other icons"
       :group 'treemacs-faces)

     (defface pve-treemacs-file-icon-face
       '((t :inherit treemacs-file-face :height 1.5))
       "Face used for the file icons, to make them bigger compared to other icons"
       :group 'treemacs-faces)
   #+END_SRC

   When treemacs loads, set project (root), folder and normal text icons.Ã©p
   These were not coverd by the automatic mapping in the use-package section
   #+BEGIN_SRC emacs-lisp
     (with-eval-after-load "treemacs"
       (setq treemacs-icon-open-png   (propertize (format "%s " (all-the-icons-material "folder_open"))
						  'face 'pve-treemacs-directory-icon-face)
	     treemacs-icon-closed-png (propertize (format "%s " (all-the-icons-material "folder"))
						  'face 'pve-treemacs-directory-icon-face)
	     treemacs-icon-root-png (propertize (format "%s " (all-the-icons-material "apps"))
						'face 'treemacs-root-face)
	     treemacs-icon-text (propertize (format "%s " (all-the-icons-octicon "file-text"))
						  'face 'pve-treemacs-file-icon-face)))

   #+END_SRC

* Utils
** Helm

  #+BEGIN_SRC emacs-lisp
    (use-package helm
      :ensure t
      :config
      (setq helm-split-window-in-side-p               t ; open helm buffer inside current window, not occupy whole other window
		helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
		helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
		helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
		helm-ff-file-name-history-use-recentf t)
      :bind (("M-x" . helm-M-x)
	     ("C-x b" . helm-mini)
	     ("C-x C-f" . helm-find-files)
	     ("C-c h o" . helm-occur)
	     ("M-y" . helm-show-kill-ring)
	     :map helm-map
	     ("<tab>" . helm-execute-persistent-action)
	     ("C-z" . helm-select-action)))
  #+END_SRC
	
** Hydra
   
   Navigation with keys
   #+BEGIN_SRC emacs-lisp
     (use-package hydra
       :ensure t)
   #+END_SRC

   #+RESULTS:
	 
** Eshell

   Set paths depending on the environment we are running
   #+BEGIN_SRC emacs-lisp
     (defun pve-set-eshell-path-env ()
       "Settig the eshell-path-env"
       (if (pve-env/on-cygwin)
	   (progn
	     (setq cygwin-paths "/cygdrive/c/Program Files/nodejs/:")
	     (setq eshell-path-env (concat cygwin-paths eshell-path-env))
	     (setenv "PATH" (concat cygwin-paths (getenv "PATH"))))))
   #+END_SRC

   #+RESULTS:
   : pve-set-eshell-path-env

   Add hook to eshell to set paths when eshell starts
   #+BEGIN_SRC emacs-lisp
     (add-hook 'eshell-mode-hook 'pve-set-eshell-path-env)
   #+END_SRC
	   
** Artist mode
	      
   Artist mode doesn't work within org mode. This narrows the buffer to a place you want to work.
   And then turns on artist mode. It is turned of and widens the buffer again
   #+BEGIN_SRC emacs-lisp
     (defun pve-artist-org-mode-on ()
       (interactive)
       (org-narrow-to-element)
       (artist-mode))

     (defun pve-artist-org-mode-off ()
       (interactive)
       (artist-mode)
       (widen))
   #+END_SRC
   
* Org Mode

  Hydra for setting up navigation between headers
  and for setting up bookmarkds
  #+BEGIN_SRC emacs-lisp
    (defun pve-org-nav-hydra ()
      (require 'hydra)
      (defhydra hydra-org-navigation (org-mode-map "<f2>")
	"Org navigation"
	("n" outline-next-visible-heading)
	("p" outline-previous-visible-heading)
	("f" org-forward-heading-same-level)
	("b" org-backward-heading-same-level)
	("a" helm-org-in-buffer-headings)
	("u" outline-up-heading))
      (local-set-key (kbd "<f7>") 'org-mark-ring-push)
      (local-set-key (kbd "C-<f7>") 'org-mark-ring-goto))
  #+END_SRC

  
  #+BEGIN_SRC emacs-lisp
    (defun pve-enable-org-bullets ()
      (org-bullets-mode 1))
  #+END_SRC

  Actually configure org mode
  #+BEGIN_SRC emacs-lisp
    (use-package org-mode
      :init
      (setq org-confirm-babel-evaluate nil) ;;No need to confirm executing babel code blocks
      (require 'ob-async)
      :hook
      ((org-mode . pve-org-nav-hydra)
       (org-mode . pve-enable-org-bullets))
      :after (hydra org-bullets ob-async))
  #+END_SRC

  Show bullets as images not just '*'s
  #+BEGIN_SRC emacs-lisp
    (use-package org-bullets
      :ensure t)
  #+END_SRC

  This package enables asynchronous org babel evaluation
  #+BEGIN_SRC emacs-lisp
    (use-package ob-async
      :ensure t)
  #+END_SRC
* Application Integration
** Twitter
   
   #+BEGIN_SRC emacs-lisp
     (use-package twittering-mode
       :ensure t)
   #+END_SRC

   #+RESULTS:
** Pocket

   Simple client to show list of pocket items
   #+BEGIN_SRC emacs-lisp
     (use-package pocket-mode
       :ensure t
       :after (pocket-api))
   #+END_SRC

   Backend API to login into pocket and retrieive the (getpocket.com)
  #+BEGIN_SRC emacs-lisp
    (use-package pocket-api
      :ensure t)
  #+END_SRC

* Libraries
  
  #+BEGIN_SRC emacs-lisp
    (use-package message-history)
  #+END_SRC

  Language Server Protocol (LSP) integration into emacs.
  This enables connections to LSP servers from emacs.
  #+BEGIN_SRC emacs-lisp
    (use-package lsp-mode
      :ensure t)
  #+END_SRC

  LSP-UI higher level UI modules for LSP integration into emacs.
  #+BEGIN_SRC emacs-lisp
    (use-package lsp-ui
      :ensure t
      :config
      (setq lsp-ui-sideline-ignore-duplicate t)
      ;; aut enable lsp-ui on lsp-mode
      :hook (lsp-mode . lsp-ui-mode))
  #+END_SRC  

  Icon library with many unicode characters, icons, ...
  #+BEGIN_SRC emacs-lisp
    (use-package all-the-icons
      :ensure t)
  #+END_SRC
  If the icons are not installed run 'all-the-icons-install-fonts'.

